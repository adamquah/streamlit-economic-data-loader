import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Streamlit App Setup
st.title('Clustering Exchange Rate Analysis')
st.write('This app clusters the exchange rate data of Malaysia with other countries.')

# File uploader
uploaded_file = st.file_uploader('Choose a CSV file for exchange rates', type=['csv'])
if uploaded_file is not None:
    exchange_rate = pd.read_csv(uploaded_file)
    st.write('Data Overview:')
    st.dataframe(exchange_rate.head())
    st.write('Shape of the dataset:', exchange_rate.shape)
    st.write('Columns:', exchange_rate.columns)

# Displaying Exchange Rate Data
if uploaded_file is not None:
    exchange_rate['Year'] = pd.to_datetime(exchange_rate['date']).dt.year
    yearly_avg = exchange_rate.groupby('Year').mean()
    st.write('Yearly Average Exchange Rates:')
    st.dataframe(yearly_avg)

# Plotting
if uploaded_file is not None:
    st.write('Plotting Exchange Rates')
    selected_column = st.selectbox('Select a column to plot:', exchange_rate.columns[1:])
    if selected_column:
        plt.figure(figsize=(10, 5))
        sns.lineplot(data=exchange_rate, x='Year', y=selected_column)
        plt.title(f'Exchange Rate of {selected_column} over time')
        st.pyplot(plt)

# -*- coding: utf-8 -*-
"""G1_finalized_main_coding

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YN_cEKOPoLawMIepYl74ll1i8IwHNrSh

# **Title: Clustering the Exchange Rate of Malaysia with other Countries**

# **1.0 Project Understanding**

To address the task of analyzing and clustering exchange rate patterns due to the instability of the Malaysian Ringgit (MYR), our  project involves several key steps  in order to analyze and cluster Malaysia's exchange rate data in relation to other countries to identify patterns, similarities, and groupings that reveal insights about Malaysia's currency behavior in the global context.

##**1.1 Project Background**

1. **Countries Involved:** Malaysia Malaysia (as the primary country of interest)

**Comparison Countries:** USA , China, Singapore, European Union, Japan, Taiwan, Thailand, Indonesia,Hong Kong, South Korea, Vietnam, India, Australia, Philippines, United Arab Emirates, Saudi Arabia, Turkey, United Kingdom, Brazil, Mexico, Bangladesh, Switzerland, Canada, Russia


---


2. **Data Collection:**

Available datasets:

*   Exchange Rate
*   Interest Rate
*   Unemployed Rate
*   Global Commodity Price
*   Inflation Rate







---


3. **Time frame:** year 2003 - year 2024

## **1.2 Problem Statement**

1. **Complexity of Exchange Rate Prediction:**
Exchange rates are influenced by numerous factors, including economic indicators, political events, and market sentiment, making them highly complex and challenging to predict. The multifaceted nature of these influencing factors requires sophisticated analysis to capture the intricate patterns and relationships between currencies.


2. **Limitations of Traditional Forecasting Models:**
Traditional forecasting models, such as ARIMA (AutoRegressive Integrated Moving Average) and econometric approaches, often struggle with the non-linear and dynamic nature of exchange rates. These models may not fully account for sudden market shocks, geopolitical events, or structural changes in the economy, leading to less accurate predictions.


3. **Challenges in Predicting Future Currency Rate Patterns:**
Predicting future currency rate patterns involves dealing with uncertainty and volatility. The challenge is to anticipate how various factors will influence exchange rates and to develop models that can adapt to changing market conditions. Existing models may not capture the underlying trends and structural breaks in exchange rate data.

4. **Unveiling Hidden Patterns in Exchange Rate Data:**
There may be hidden patterns or clusters within exchange rate data that are not immediately apparent through conventional analysis. Identifying these patterns requires advanced techniques to analyze and cluster exchange rate data, revealing insights into currency behaviors and relationships that could enhance forecasting and risk management.

## **1.3 Objectives**

1. **Identify Similar Exchange Rate Patterns** :
*   Determine which countries have similar exchange rate movements relative to Malaysia.
*   Understand how Malaysia's exchange rate behaves in comparison to other economies.



2. **Group Countries Based on Exchange Rate Trends**:
*   Categorize countries into clusters where each cluster represents a group of countries with similar exchange rate behaviors.
*    To identify and analyze the underlying patterns within exchange rate data  by integrating multiple economic, market, and political indicators.



3. **Inform Financial and Economic Decisions**:
*   Use clustering results to assist in financial planning, investment decisions, or economic policy formulation related to currency exchange.
*   To provide insights into potential future currency rate shifts and their implications for market trends.

# **2.0 Literature Review**

#**3.0 Data Preparation**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

"""## **A. ) Exchange Rate**"""

exchange_rate = pd.read_csv("data/Exchange_Rate.csv")

exchange_rate.head(5)

exchange_rate.tail(5)

exchange_rate.shape

exchange_rate.columns

"""### **Definition of the heading:**
- date: This column contains the date in an integer format. It has no null entries, indicating that every record has a corresponding date.

- myr_usd: Exchange rate from Malaysian Ringgit (MYR) to United States Dollar (USD).

- myr_rmb: Exchange rate from Malaysian Ringgit (MYR) to Chinese Renminbi (RMB).

- myr_sgd: Exchange rate from Malaysian Ringgit (MYR) to Singapore Dollar (SGD).

- myr_eur: Exchange rate from Malaysian Ringgit (MYR) to Euro (EUR).

- myr_jpy: Exchange rate from Malaysian Ringgit (MYR) to Japanese Yen (JPY).

- myr_twd: Exchange rate from Malaysian Ringgit (MYR) to New Taiwan Dollar (TWD).

- myr_thb: Exchange rate from Malaysian Ringgit (MYR) to Thai Baht (THB).

- myr_idr: Exchange rate from Malaysian Ringgit (MYR) to Indonesian Rupiah (IDR).

- myr_hkd: Exchange rate from Malaysian Ringgit (MYR) to Hong Kong Dollar (HKD).

- myr_krw: Exchange rate from Malaysian Ringgit (MYR) to South Korean Won (KRW).

- myr_vnd: Exchange rate from Malaysian Ringgit (MYR) to Vietnamese Dong (VND).

- myr_inr: Exchange rate from Malaysian Ringgit (MYR) to Indian Rupee (INR).

- myr_aud: Exchange rate from Malaysian Ringgit (MYR) to Australian Dollar (AUD).

- myr_php: Exchange rate from Malaysian Ringgit (MYR) to Philippine Peso (PHP).

- myr_aed: Exchange rate from Malaysian Ringgit (MYR) to United Arab Emirates Dirham (AED).

- myr_sar: Exchange rate from Malaysian Ringgit (MYR) to Saudi Riyal (SAR).

- myr_try: Exchange rate from Malaysian Ringgit (MYR) to Turkish Lira (TRY).

- myr_gbp: Exchange rate from Malaysian Ringgit (MYR) to British Pound Sterling (GBP).

- myr_brl: Exchange rate from Malaysian Ringgit (MYR) to Brazilian Real (BRL).

- myr_mxn: Exchange rate from Malaysian Ringgit (MYR) to Mexican Peso (MXN).

- myr_bdt: Exchange rate from Malaysian Ringgit (MYR) to Bangladeshi Taka (BDT).

- myr_chf: Exchange rate from Malaysian Ringgit (MYR) to Swiss Franc (CHF).

- myr_cad: Exchange rate from Malaysian Ringgit (MYR) to Canadian Dollar (CAD).

- myr_rub: Exchange rate from Malaysian Ringgit (MYR) to Russian Ruble (RUB).




"""

exchange_rate.info()

"""- date: This column contains integer data type and has no null entries.
- myr_usd: This column contains float64 data type and has no null entries.
- myr_rmb: This column contains float64 data type and has no null entries.
- myr_sgd: This column contains float64 data type and has no null entries.
- myr_eur: This column contains float64 data type and has no null entries.
- myr_jpy: This column contains float64 data type and has no null entries.
- myr_twd: This column contains float64 data type and has no null entries.
- myr_thb: This column contains float64 data type and has no null entries.
- myr_idr: This column contains float64 data type and has no null entries.
- myr_hkd: This column contains float64 data type and has no null entries.
- myr_krw: This column contains float64 data type and has no null entries.
- myr_vnd: This column contains float64 data type and has no null entries.
- myr_inr: This column contains float64 data type and has no null entries.
- myr_aud: This column contains float64 data type and has no null entries.
- myr_php: This column contains float64 data type and has no null entries.
- myr_aed: This column contains float64 data type and has no null entries.
- myr_sar: This column contains float64 data type and has no null entries.
- myr_try: This column contains float64 data type and has no null entries.
- myr_gbp: This column contains float64 data type and has no null entries.
- myr_brl: This column contains float64 data type and has no null entries.
- myr_mxn: This column contains float64 data type and has no null entries.
- myr_bdt: This column contains float64 data type and has no null entries.
- myr_chf: This column contains float64 data type and has no null entries.
- myr_cad: This column contains float64 data type and has no null entries.
- myr_rub: This column contains float64 data type and has no null entries.
"""

exchange_rate.dtypes

"""
*   date    : This column contains object data type.
*   myr_usd : This column contains float data type.
*   myr_rmb : This column contains float data type.
*   myr_sgd : This column contains float data type.
*   myr_eur : This column contains float data type.
*   myr_jpy : This column contains float data type.
*   myr_twd : This column contains float data type.
*   myr_thb : This column contains float data type.
*   myr_idr : This column contains float data type.
*   myr_hkd : This column contains float data type.
*   myr_krw : This column contains float data type.
*   myr_vnd : This column contains float data type.
*   myr_inr : This column contains float data type.
*   myr_aud : This column contains float data type.
*   myr_php : This column contains float data type.
*   myr_aed : This column contains float data type.
*   myr_sar : This column contains float data type.
*   myr_try : This column contains float data type.
*   myr_gbp : This column contains float data type.
*   myr_brl : This column contains float data type.
*   myr_mxn : This column contains float data type.
*   myr_bdt : This column contains float data type.
*   myr_chf : This column contains float data type.
*   myr_cad : This column contains float data type.
*   myr_rub : This column contains float data type."""

exchange_rate.describe()

"""- **Count (number of values)**: All currency pairs have 7,545 data points.
- **Mean (average value)**: myr_usd: 0.2691， myr_rmb: 1.8546， myr_sgd: 0.3756，myr_eur: 0.2180， myr_jpy: 28.8127， myr_twd: 8.3113，myr_thb: 9.0392， myr_idr: 3098.4561， myr_hkd: 2.0943，myr_krw: 302.9567，myr_aud: 0.3665，myr_inr: 20.5672，myr_php: 14.7114，myr_vnd: 6464.6225，myr_aed: 0.9882，myr_sar: 1.0085，myr_try: 1.2916，myr_gbp: 0.1773，myr_brl: 0.8124，myr_mxn: 4.0082，myr_bdt: 20.5464，myr_chf: 0.2744，myr_cad: 0.3178，myr_rub: 12.3598
- **Standard Deviation (std)**:
myr_usd: 0.0357, myr_rmb: 0.2605, myr_sgd: 0.0519, myr_eur: 0.0159, myr_jpy: 2.8681, myr_twd: 1.1269, myr_thb: 1.1253, myr_idr: 386.6973, myr_hkd: 0.2743, myr_krw: 37.7704, myr_aud: 0.0505, myr_inr: 1.5178, myr_php: 1.4273, myr_vnd: 740.7976, myr_aed: 0.1311, myr_sar: 0.1338, myr_try: 1.5358, myr_gbp: 0.0202, myr_brl: 0.2390, myr_mxn: 0.6638, myr_bdt: 2.7020, myr_chf: 0.0497, myr_cad: 0.0160, myr_rub: 4.2289
- **Minimum Value (min)**:
myr_usd: 0.2085, myr_rmb: 1.4270, myr_sgd: 0.2801, myr_eur: 0.1841, myr_jpy: 23.9112, myr_twd: 0.5761, myr_thb: 7.2053, myr_idr: 288.0762, myr_hkd: 1.6306, myr_krw: 244.9520, myr_aud: 0.2756, myr_inr: 16.2903, myr_php: 10.9745, myr_vnd: 3594.4985, myr_aed: 0.7657, myr_sar: 0.7480, myr_try: 0.3295, myr_gbp: 0.1352, myr_brl: 0.4779, myr_mxn: 2.7597, myr_bdt: 14.7762, myr_chf: 0.1815, myr_cad: 0.2756, myr_rub: 0.1622
- **25th Percentile (1st Quartile - 25%)**:
myr_usd: 0.2394, myr_rmb: 1.6010, myr_sgd: 0.3274, myr_eur: 0.2067, myr_jpy: 26.4717, myr_twd: 7.1536, myr_thb: 7.8828, myr_idr: 2816.4641, myr_hkd: 1.8686, myr_krw: 272.6618, myr_aud: 0.3266, myr_inr: 19.4165, myr_php: 13.4753, myr_vnd: 5876.3980, myr_aed: 0.8792, myr_sar: 0.8971, myr_try: 0.4327, myr_gbp: 0.1612, myr_brl: 0.6006, myr_mxn: 3.5977, myr_bdt: 18.9136, myr_chf: 0.2281, myr_cad: 0.3068, myr_rub: 8.5188
- **50th Percentile (Median - 50%)**:
myr_usd: 0.2634, myr_rmb: 1.8806, myr_sgd: 0.3888, myr_eur: 0.2146, myr_jpy: 27.8746, myr_twd: 8.5969, myr_thb: 9.4151, myr_idr: 3168.4635, myr_hkd: 2.0526, myr_krw: 288.0881, myr_aud: 0.3672, myr_inr: 20.5538, myr_php: 14.7331, myr_vnd: 6403.3516, myr_aed: 0.9672, myr_sar: 0.9877, myr_try: 0.6531, myr_gbp: 0.1818, myr_brl: 0.7773, myr_mxn: 4.0712, myr_bdt: 20.1231, myr_chf: 0.2796, myr_cad: 0.3185, myr_rub: 10.7356
- **75th Percentile (3rd Quartile - 75%)**:
myr_usd: 0.3018, myr_rmb: 2.1404, myr_sgd: 0.4229, myr_eur: 0.2259, myr_jpy: 31.3276, myr_twd: 9.3932, myr_thb: 10.0074, myr_idr: 3425.4149, myr_hkd: 2.3496, myr_krw: 331.6836, myr_aud: 0.4047, myr_inr: 21.7647, myr_php: 15.8847, myr_vnd: 6993.1016, myr_aed: 1.1079, myr_sar: 1.1328, myr_try: 1.3833, myr_gbp: 0.1897, myr_brl: 0.9612, myr_mxn: 4.5469, myr_bdt: 22.8256, myr_chf: 0.3185, myr_cad: 0.3276, myr_rub: 15.9758
- **Maximum Value (max)**:
myr_usd: 0.3452, myr_rmb: 2.3628, myr_sgd: 0.4714, myr_eur: 0.2629, myr_jpy: 37.4977, myr_twd: 9.8797, myr_thb: 10.5306, myr_idr: 3934.1387, myr_hkd: 2.5191, myr_krw: 377.8744, myr_aud: 0.4713, myr_inr: 25.6033, myr_php: 18.4747, myr_vnd: 8561.0427, myr_aed: 1.2715, myr_sar: 1.2996, myr_try: 5.2303, myr_gbp: 0.2238, myr_brl: 1.2885, myr_mxn: 5.2263, myr_bdt: 30.4603, myr_chf: 0.3898, myr_cad: 0.3424, myr_rub: 24.6099
"""

exchange_rate.duplicated().sum()

exchange_rate.isnull().sum()

exchange_rate_date = 'date'
exchange_rate[exchange_rate_date] = pd.to_datetime(exchange_rate[exchange_rate_date])

exchange_rate['Year'] = exchange_rate[exchange_rate_date].dt.year

exchange_rate_columns = ["myr_usd", "myr_rmb", "myr_sgd", "myr_eur", "myr_jpy",
                         "myr_twd", "myr_thb", "myr_idr", "myr_hkd", "myr_krw",
                         "myr_vnd", "myr_inr", "myr_aud", "myr_php", "myr_aed",
                         "myr_sar", "myr_try", "myr_gbp", "myr_brl", "myr_mxn",
                         "myr_bdt", "myr_chf", "myr_cad", "myr_rub"]

yearly_avg = exchange_rate.groupby('Year')[exchange_rate_columns].mean()

df_yearly_avg = yearly_avg.reset_index()

yearly_avg_exchange_rate = 'Yearly_Avg_Exchange_Rate.csv'
df_yearly_avg.to_csv(yearly_avg_exchange_rate, index=False)

print(f"Yearly average exchange rate saved to {yearly_avg_exchange_rate}")

yearly_avg_exchange_rate = yearly_avg.reset_index()

print(type(yearly_avg_exchange_rate))
print(yearly_avg_exchange_rate.head(5))

"""## **B.) Interest Rate**"""

interest_rate = pd.read_csv("data/Interest_Rate.csv",skiprows = 0)

interest_rate.head()

interest_rate.tail()

interest_rate.shape

interest_rate.columns

interest_rate.info()

"""1. Year: int64, Non-Null Count: 64
2. Aruba: float64, Non-Null Count: 36
3. Africa Eastern and Southern: float64, Non-Null Count: 0
4. Afghanistan: float64, Non-Null Count: 12
5. Africa Western and Central: float64, Non-Null Count: 0
6. Angola: float64, Non-Null Count: 42
7. Albania: float64, Non-Null Count: 23
8. Andorra: float64, Non-Null Count: 0
9. Arab World: float64, Non-Null Count: 0
10. United Arab Emirates: float64, Non-Null Count: 17
11. Argentina: float64, Non-Null Count: 49
12. Armenia: float64, Non-Null Count: 34
13. Antigua and Barbuda: float64, Non-Null Count: 0
14. Australia: float64, Non-Null Count: 62
15. Austria: float64, Non-Null Count: 64
16. Azerbaijan: float64, Non-Null Count: 20
17. Burundi: float64, Non-Null Count: 38
18. Belgium: float64, Non-Null Count: 64
19. Benin: float64, Non-Null Count: 13
20. Burkina Faso: float64, Non-Null Count: 13
21. Bangladesh: float64, Non-Null Count: 37
22. Bulgaria: float64, Non-Null Count: 47
23. Bahrain: float64, Non-Null Count: 30
24. Bahamas, The: float64, Non-Null Count: 0
25. Bosnia and Herzegovina: float64, Non-Null Count: 11
26. Belarus: float64, Non-Null Count: 26
27. Belize: float64, Non-Null Count: 0
28. Bermuda: float64, Non-Null Count: 0
29. Bolivia: float64, Non-Null Count: 46
30. Brazil: float64, Non-Null Count: 64
31. Barbados: float64, Non-Null Count: 0
32. Brunei Darussalam: float64, Non-Null Count: 0
33. Bhutan: float64, Non-Null Count: 2
34. Botswana: float64, Non-Null Count: 17
35. Central African Republic: float64, Non-Null Count: 0
36. Canada: float64, Non-Null Count: 64
37. Central Europe and the Baltics: float64, Non-Null Count: 0
38. Switzerland: float64, Non-Null Count: 63
39. Channel Islands: float64, Non-Null Count: 0
40. Chile: float64, Non-Null Count: 64
41. China: float64, Non-Null Count: 41
42. Cote d'Ivoire: float64, Non-Null Count: 18
43. Cameroon: float64, Non-Null Count: 15
44. Congo, Dem. Rep.: float64, Non-Null Count: 8
45. Congo, Rep.: float64, Non-Null Count: 11
46. Colombia: float64, Non-Null Count: 64
47. Comoros: float64, Non-Null Count: 0
48. Cabo Verde: float64, Non-Null Count: 12
49. Costa Rica: float64, Non-Null Count: 63
50. Caribbean small states: float64, Non-Null Count: 0
51. Cuba: float64, Non-Null Count: 0
52. Curacao: float64, Non-Null Count: 0
53. Cayman Islands: float64, Non-Null Count: 0
54. Cyprus: float64, Non-Null Count: 62
55. Czech Republic: float64, Non-Null Count: 34
56. Germany: float64, Non-Null Count: 64
57. Djibouti: float64, Non-Null Count: 0
58. Dominica: float64, Non-Null Count: 0
59. Denmark: float64, Non-Null Count: 64
60. Dominican Republic: float64, Non-Null Count: 58
61. Algeria: float64, Non-Null Count: 29
62. East Asia & Pacific (excluding high income): float64, Non-Null Count: 0
63. Early-demographic dividend: float64, Non-Null Count: 0
64. East Asia & Pacific: float64, Non-Null Count: 0
65. Europe & Central Asia (excluding high income): float64, Non-Null Count: 0
66. Europe & Central Asia: float64, Non-Null Count: 0
67. Ecuador: float64, Non-Null Count: 64
68. Egypt, Arab Rep.: float64, Non-Null Count: 60
69. Euro area: float64, Non-Null Count: 64
70. Eritrea: float64, Non-Null Count: 0
71. Spain: float64, Non-Null Count: 64
72. Estonia: float64, Non-Null Count: 35
73. Eswatini: float64, Non-Null Count: 20
74. Ethiopia: float64, Non-Null Count: 11
75. European Union: float64, Non-Null Count: 64
76. Fragile and conflict affected situations: float64, Non-Null Count: 0
77. Finland: float64, Non-Null Count: 64
78. Fiji: float64, Non-Null Count: 14
79. France: float64, Non-Null Count: 64
80. Faroe Islands: float64, Non-Null Count: 0
81. Micronesia, Fed. Sts.: float64, Non-Null Count: 0
82. Gabon: float64, Non-Null Count: 0
83. United Kingdom: float64, Non-Null Count: 64
84. Georgia: float64, Non-Null Count: 36
85. Ghana: float64, Non-Null Count: 33
86. Gibraltar: float64, Non-Null Count: 0
87. Guinea: float64, Non-Null Count: 0
88. Gambia, The: float64, Non-Null Count: 12
89. Guinea-Bissau: float64, Non-Null Count: 0
90. Equatorial Guinea: float64, Non-Null Count: 0
91. Greece: float64, Non-Null Count: 64
92. Grenada: float64, Non-Null Count: 0
93. Greenland: float64, Non-Null Count: 0
94. Guatemala: float64, Non-Null Count: 40
95. Guam: float64, Non-Null Count: 0
96. Guyana: float64, Non-Null Count: 4
97. High income: float64, Non-Null Count: 0
98. Hong Kong SAR, China: float64, Non-Null Count: 64
99. Honduras: float64, Non-Null Count: 58
100. Heavily indebted poor countries (HIPC): float64, Non-Null Count: 0
101. Croatia: float64, Non-Null Count: 33
102. Haiti: float64, Non-Null Count: 24
103. Hungary: float64, Non-Null Count: 63
104. Indonesia: float64, Non-Null Count: 56
105. India: float64, Non-Null Count: 61
106. Ireland: float64, Non-Null Count: 64
107. Iran, Islamic Rep.: float64, Non-Null Count: 44
108. Iraq: float64, Non-Null Count: 10
109. Iceland: float64, Non-Null Count: 63
110. Israel: float64, Non-Null Count: 64
111. Italy: float64, Non-Null Count: 64
112. Jamaica: float64, Non-Null Count: 33
113. Jordan: float64, Non-Null Count: 39
114. Japan: float64, Non-Null Count: 64
115. Kazakhstan: float64, Non-Null Count: 32
116. Kenya: float64, Non-Null Count: 38
117. Kyrgyz Republic: float64, Non-Null Count: 20
118. Cambodia: float64, Non-Null Count: 3
119. Kiribati: float64, Non-Null Count: 0
120. St. Kitts and Nevis: float64, Non-Null Count: 0
121. Korea, Rep.: float64, Non-Null Count: 63
122. Kuwait: float64, Non-Null Count: 22
123. Latin America & Caribbean (excluding high income): float64, Non-Null Count: 0
124. Lebanon: float64, Non-Null Count: 36
125. Liberia: float64, Non-Null Count: 1
126. Libya: float64, Non-Null Count: 19
127. St. Lucia: float64, Non-Null Count: 0
128. Latin America & Caribbean: float64, Non-Null Count: 0
129. Least developed countries: UN classification: float64, Non-Null Count: 0
130. Low income: float64, Non-Null Count: 0
131. Liechtenstein: float64, Non-Null Count: 0
132. Sri Lanka: float64, Non-Null Count: 42
133. Lower middle income: float64, Non-Null Count: 0
134. Low & middle income: float64, Non-Null Count: 0
135. Lesotho: float64, Non-Null Count: 17
136. Late-demographic dividend: float64, Non-Null Count: 0
137. Lithuania: float64, Non-Null Count: 31
138. Luxembourg: float64, Non-Null Count: 62
139. Latvia: float64, Non-Null Count: 33
140. Macao SAR, China: float64, Non-Null Count: 0
141. St. Martin (French part): float64, Non-Null Count: 0
142. Morocco: float64, Non-Null Count: 54
143. Monaco: float64, Non-Null Count: 0
144. Moldova: float64, Non-Null Count: 24
145. Madagascar: float64, Non-Null Count: 5
146. Maldives: float64, Non-Null Count: 9
147. Middle East & North Africa: float64, Non-Null Count: 0
148. Mexico: float64, Non-Null Count: 63
149. Marshall Islands: float64, Non-Null Count: 0
150. Middle income: float64, Non-Null Count: 0
151. North Macedonia: float64, Non-Null Count: 30
152. Mali: float64, Non-Null Count: 16
153. Malta: float64, Non-Null Count: 62
154. Myanmar: float64, Non-Null Count: 3
155. Middle East & North Africa (excluding high income): float64, Non-Null Count: 0
156. Montenegro: float64, Non-Null Count: 13
157. Mongolia: float64, Non-Null Count: 10
158. Northern Mariana Islands: float64, Non-Null Count: 0
159. Mozambique: float64, Non-Null Count: 9
160. Mauritania: float64, Non-Null Count: 3
161. Mauritius: float64, Non-Null Count: 43
162. Malawi: float64, Non-Null Count: 3
163. Malaysia: float64, Non-Null Count: 57
164. North America: float64, Non-Null Count: 0
165. Namibia: float64, Non-Null Count: 16
166. New Caledonia: float64, Non-Null Count: 0
167. Niger: float64, Non-Null Count: 12
168. Nigeria: float64, Non-Null Count: 41
169. Nicaragua: float64, Non-Null Count: 27
170. Netherlands: float64, Non-Null Count: 64
171. Norway: float64, Non-Null Count: 64
172. Nepal: float64, Non-Null Count: 28
173. Nauru: float64, Non-Null Count: 0
174. New Zealand: float64, Non-Null Count: 62
175. OECD members: float64, Non-Null Count: 0
176. Oman: float64, Non-Null Count: 21
177. Other small states: float64, Non-Null Count: 0
178. Pakistan: float64, Non-Null Count: 57
179. Panama: float64, Non-Null Count: 59
180. Peru: float64, Non-Null Count: 63
181. Philippines: float64, Non-Null Count: 56
182. Palau: float64, Non-Null Count: 0
183. Papua New Guinea: float64, Non-Null Count: 0
184. Poland: float64, Non-Null Count: 63
185. Puerto Rico: float64, Non-Null Count: 0
186. Korea, Dem. People's Rep.: float64, Non-Null Count: 0
187. Portugal: float64, Non-Null Count: 64
188. Paraguay: float64, Non-Null Count: 62
189. West Bank and Gaza: float64, Non-Null Count: 6
190. Pacific island small states: float64, Non-Null Count: 0
191. Post-demographic dividend: float64, Non-Null Count: 0
192. French Polynesia: float64, Non-Null Count: 0
193. Qatar: float64, Non-Null Count: 18
194. Romania: float64, Non-Null Count: 61
195. Russian Federation: float64, Non-Null Count: 61
196. Rwanda: float64, Non-Null Count: 24
197. South Asia: float64, Non-Null Count: 0
198. Saudi Arabia: float64, Non-Null Count: 22
199. Sudan: float64, Non-Null Count: 24
200. Senegal: float64, Non-Null Count: 17
201. Singapore: float64, Non-Null Count: 64
202. Solomon Islands: float64, Non-Null Count: 1
203. Sierra Leone: float64, Non-Null Count: 11
204. El Salvador: float64, Non-Null Count: 47
205. San Marino: float64, Non-Null Count: 0
206. Somalia: float64, Non-Null Count: 0
207. Serbia: float64, Non-Null Count: 29
208. Sub-Saharan Africa (excluding high income): float64, Non-Null Count: 0
209. South Sudan: float64, Non-Null Count: 6
210. Sub-Saharan Africa: float64, Non-Null Count: 0
211. Small states: float64, Non-Null Count: 0
212. Sao Tome and Principe: float64, Non-Null Count: 6
213. Suriname: float64, Non-Null Count: 2
214. Slovak Republic: float64, Non-Null Count: 31
215. Slovenia: float64, Non-Null Count: 33
216. Sweden: float64, Non-Null Count: 64
217. Eswatini: float64, Non-Null Count: 0
218. Seychelles: float64, Non-Null Count: 7
219. Syrian Arab Republic: float64, Non-Null Count: 8
220. Turks and Caicos Islands: float64, Non-Null Count: 0
221. Chad: float64, Non-Null Count: 2
222. Togo: float64, Non-Null Count: 10
223. Thailand: float64, Non-Null Count: 63
224. Tajikistan: float64, Non-Null Count: 20
225. Turkmenistan: float64, Non-Null Count: 8
226. Latin America & Caribbean (IDA & IBRD countries): float64, Non-Null Count: 0
227. Timor-Leste: float64, Non-Null Count: 0
228. Middle East & North Africa (IDA & IBRD countries): float64, Non-Null Count: 0
229. Tonga: float64, Non-Null Count: 2
230. South Asia (IDA & IBRD): float64, Non-Null Count: 0
231. Sub-Saharan Africa (IDA & IBRD countries): float64, Non-Null Count: 0
232. Trinidad and Tobago: float64, Non-Null Count: 15
233. Tunisia: float64, Non-Null Count: 37
234. Turkey: float64, Non-Null Count: 64
235. Tuvalu: float64, Non-Null Count: 0
236. Tanzania: float64, Non-Null Count: 14
237. Uganda: float64, Non-Null Count: 31
238. Ukraine: float64, Non-Null Count: 48
239. Upper middle income: float64, Non-Null Count: 0
240. Uruguay: float64, Non-Null Count: 64
241. United States: float64, Non-Null Count: 64
242. Uzbekistan: float64, Non-Null Count: 16
243. St. Vincent and the Grenadines: float64, Non-Null Count: 0
244. Venezuela, RB: float64, Non-Null Count: 42
245. British Virgin Islands: float64, Non-Null Count: 0
246. Virgin Islands (U.S.): float64, Non-Null Count: 0
247. Vietnam: float64, Non-Null Count: 61
248. Vanuatu: float64, Non-Null Count: 0
249. West Bank and Gaza: float64, Non-Null Count: 10
250. Samoa: float64, Non-Null Count: 4
251. Yemen, Rep.: float64, Non-Null Count: 13
252. South Africa: float64, Non-Null Count: 63
253. Zambia: float64, Non-Null Count: 16
254. Zimbabwe: float64, Non-Null Count: 17

"""

interest_rate.dtypes

"""Year: int64
Aruba: float64
Africa Eastern and Southern: float64
Afghanistan: float64
Africa Western and Central: float64
Angola: float64
Albania: float64
Andorra: float64
Arab World: float64
United Arab Emirates: float64
Argentina: float64
Armenia: float64
Antigua and Barbuda: float64
Australia: float64
Austria: float64
Azerbaijan: float64
Burundi: float64
Belgium: float64
Benin: float64
Burkina Faso: float64
Bangladesh: float64
Bulgaria: float64
Bahrain: float64
Bahamas, The: float64
Bosnia and Herzegovina: float64
Belarus: float64
Belize: float64
Bermuda: float64
Bolivia: float64
Brazil: float64
Barbados: float64
Brunei Darussalam: float64
Bhutan: float64
Botswana: float64
Central African Republic: float64
Canada: float64
Central Europe and the Baltics: float64
Switzerland: float64
Channel Islands: float64
Chile: float64
China: float64
Cote d'Ivoire: float64
Cameroon: float64
Congo, Dem. Rep.: float64
Congo, Rep.: float64
Colombia: float64
Comoros: float64
Cabo Verde: float64
Costa Rica: float64
Caribbean small states: float64
Cuba: float64
Curacao: float64
Cayman Islands: float64
Cyprus: float64
Czech Republic: float64
Germany: float64
Djibouti: float64
Dominica: float64
Denmark: float64
Dominican Republic: float64
Algeria: float64
East Asia & Pacific (excluding high income): float64
Early-demographic dividend: float64
East Asia & Pacific: float64
Europe & Central Asia (excluding high income): float64
Europe & Central Asia: float64
Ecuador: float64
Egypt, Arab Rep.: float64
Euro area: float64
Eritrea: float64
Spain: float64
Estonia: float64
Eswatini: float64
Ethiopia: float64
European Union: float64
Fragile and conflict affected situations: float64
Finland: float64
Fiji: float64
France: float64
Faroe Islands: float64
Micronesia, Fed. Sts.: float64
Gabon: float64
United Kingdom: float64
Georgia: float64
Ghana: float64
Gibraltar: float64
Guinea: float64
Gambia, The: float64
Guinea-Bissau: float64
Equatorial Guinea: float64
Greece: float64
Grenada: float64
Greenland: float64
Guatemala: float64
Guam: float64
Guyana: float64
High income: float64
Hong Kong SAR, China: float64
Honduras: float64
Heavily indebted poor countries (HIPC): float64
Croatia: float64
Haiti: float64
Hungary: float64
Indonesia: float64
India: float64
Ireland: float64
Iran, Islamic Rep.: float64
Iraq: float64
Iceland: float64
Israel: float64
Italy: float64
Jamaica: float64
Jordan: float64
Japan: float64
Kazakhstan: float64
Kenya: float64
Kyrgyz Republic: float64
Cambodia: float64
Kiribati: float64
St. Kitts and Nevis: float64
Korea, Rep.: float64
Kuwait: float64
Latin America & Caribbean (excluding high income): float64
Lebanon: float64
Liberia: float64
Libya: float64
St. Lucia: float64
Latin America & Caribbean: float64
Least developed countries: UN classification: float64
Low income: float64
Liechtenstein: float64
Sri Lanka: float64
Lower middle income: float64
Low & middle income: float64
Lesotho: float64
Late-demographic dividend: float64
Lithuania: float64
Luxembourg: float64
Latvia: float64
Macao SAR, China: float64
St. Martin (French part): float64
Morocco: float64
Monaco: float64
Moldova: float64
Madagascar: float64
Maldives: float64
Middle East & North Africa: float64
Mexico: float64
Marshall Islands: float64
Middle income: float64
North Macedonia: float64
Mali: float64
Malta: float64
Myanmar: float64
Middle East & North Africa (excluding high income): float64
Montenegro: float64
Mongolia: float64
Northern Mariana Islands: float64
Mozambique: float64
Mauritania: float64
Mauritius: float64
Malawi: float64
Malaysia: float64
North America: float64
Namibia: float64
New Caledonia: float64
Niger: float64
Nigeria: float64
Nicaragua: float64
Netherlands: float64
Norway: float64
Nepal: float64
Nauru: float64
New Zealand: float64
OECD members: float64
Oman: float64
Other small states: float64
Pakistan: float64
Panama: float64
Peru: float64
Philippines: float64
Palau: float64
Papua New Guinea: float64
Poland: float64
Puerto Rico: float64
Korea, Dem. People's Rep.: float64
Portugal: float64
Paraguay: float64
West Bank and Gaza: float64
Pacific island small states: float64
Post-demographic dividend: float64
French Polynesia: float64
Qatar: float64
Romania: float64
Russian Federation: float64
Rwanda: float64
South Asia: float64
Saudi Arabia: float64
Sudan: float64
Senegal: float64
Singapore: float64
Solomon Islands: float64
Sierra Leone: float64
El Salvador: float64
San Marino: float64
Somalia: float64
Serbia: float64
Sub-Saharan Africa (excluding high income): float64
South Sudan: float64
Sub-Saharan Africa: float64
Small states: float64
Sao Tome and Principe: float64
Suriname: float64
Slovak Republic: float64
Slovenia: float64
Sweden: float64
Eswatini: float64
Seychelles: float64
Syrian Arab Republic: float64
Turks and Caicos Islands: float64
Chad: float64
Togo: float64
Thailand: float64
Tajikistan: float64
Turkmenistan: float64
Latin America & Caribbean (IDA & IBRD countries): float64
Timor-Leste: float64
Middle East & North Africa (IDA & IBRD countries): float64
Tonga: float64
South Asia (IDA & IBRD): float64
Sub-Saharan Africa (IDA & IBRD countries): float64
Trinidad and Tobago: float64
Tunisia: float64
Turkey: float64
Tuvalu: float64
Tanzania: float64
Uganda: float64
Ukraine: float64
Upper middle income: float64
Uruguay: float64
United States: float64
Uzbekistan: float64
St. Vincent and the Grenadines: float64
Venezuela, RB: float64
British Virgin Islands: float64
Virgin Islands (U.S.): float64
Vietnam: float64
Vanuatu: float64
World: float64
Samoa: float64
Kosovo: float64
Yemen, Rep.: float64
South Africa: float64
Zambia: float64
Zimbabwe: float64
"""

interest_rate.describe()

"""**Only do for selected countries: USA , China, Singapore, European Union, Japan, Taiwan, Thailand, Indonesia,Hong Kong, South Korea, Vietnam, India, Australia, Philippines, United Arab Emirates, Saudi Arabia, Turkey, United Kingdom, Brazil, Mexico, Bangladesh, Switzerland, Canada, Russia**



1.   The count (number of values) : USA : 61 ,China : 44 ,  Singapore :  44 , EU: --  , Japan: 25  , Taiwan : -  , Thailand: 46 , Indonesia:38 , Hong Kong : 34 , South Korea : 28 , Vietnam : 29, India : 45 , Australia : 59 , Philippines : 44 , United Arab Emirates : -- , Saudi Arabia : -- ,  Turkey : -- , United Kingdom : 48, Brazil : 27 , Mexico : 31 , Bangladesh : 48 , Switzerland : 16 , Canada : 57, Russia : 27


2.   The mean (average value) : USA : 3.64449645 ,China : 2.094743922 ,  Singapore : 4.317295251  , EU: --  , Japan:  2.53832979 , Taiwan : --  , Thailand: 5.218347546 , Indonesia: 6.101275719, Hong Kong :  4.374402708, South Korea : 4.027137094 , Vietnam : 3.330408811, India : 5.632569803 , Australia : 3.504011584 , Philippines : 4.757931069 , United Arab Emirates :--  , Saudi Arabia :--  ,  Turkey : -- , United Kingdom : 1.361302256, Brazil : 38.75364347 , Mexico :2.611762161  , Bangladesh : 4.962519351 , Switzerland : 2.475609477 , Canada : 3.257037271, Russia : 0.2335666039


3. The standard deviation (variability of data) : USA :2.30091319754392  ,China : 3.19355354937172 ,  Singapore :  2.93185850645831 , EU: --  , Japan: 1.31165596020576  , Taiwan :  -- , Thailand:5.2183475852826  , Indonesia:7.23211455912134 , Hong Kong :  3.84558284548828, South Korea : 2.62986666451653 , Vietnam :6.18361969828954 , India : 2.75426974952297 , Australia :3.40788803177841  , Philippines : 4.33081562638117 , United Arab Emirates :--  , Saudi Arabia : -- ,  Turkey : -- , United Kingdom :3.74956300352428 , Brazil : 14.509617854755 , Mexico : 5.19511070984243 , Bangladesh :  7.01510773541105, Switzerland : 0.926736717338406 , Canada : 2.770762570353, Russia : 8.70005868950694


4. The minimum value :USA :-1.281580541  ,China : -7.989744154 ,  Singapore : -4.54706642  , EU: --  , Japan:  -0.94844123 , Taiwan : --  , Thailand: 3.83615312308369 , Indonesia:-24.60016808 , Hong Kong : -2.334937143 , South Korea : 0.117975152 , Vietnam :-20.49708191, India : -1.983859221 , Australia : -6.019131825 , Philippines : -16.1900974 , United Arab Emirates : -- , Saudi Arabia : -- ,  Turkey : -- , United Kingdom :-12.16740699 , Brazil : 15.01088497 , Mexico : -17.24857091 , Bangladesh : -13.64213564 , Switzerland : 0.145920368 , Canada :-4.170201382 , Russia :-18.95155294


5. The 25th percentile (first quartile) : USA : 2.10659449 ,China :0.036036217  ,  Singapore : 2.33077301074999  , EU:  -- , Japan:2.180076528   , Taiwan : --  , Thailand: 1.554556797 , Indonesia:2.994914452 , Hong Kong : 2.06757150725 , South Korea : 2.69332485375 , Vietnam :2.401517259 , India :4.337109738  , Australia : 1.560286187 , Philippines : 3.31103672525 , United Arab Emirates : -- , Saudi Arabia :  --,  Turkey : -- , United Kingdom :-1.03400686325 , Brazil :30.509439135  , Mexico : 0.7076313175 , Bangladesh :3.06236510525  , Switzerland : 1.86139359775 , Canada : 1.392510078, Russia :4.7041603715


6. The 50th percentile (median) : USA : 3.073247242 ,China :2.629245433  ,  Singapore :4.3638501345   , EU: --  , Japan: 2.90562806  , Taiwan :  -- , Thailand:2.767070913  , Indonesia: 7.0370369175, Hong Kong :3.332377318  , South Korea : 3.607142878 , Vietnam : 4.789731165, India :5.814776512 , Australia :3.306339873  , Philippines :4.75934658499999  , United Arab Emirates : -- , Saudi Arabia :--  ,  Turkey : -- , United Kingdom :1.7318455405 , Brazil : 35.3667578 , Mexico : 2.253200676 , Bangladesh :  5.4898190625, Switzerland : 2.6811441255 , Canada :2.987357392 , Russia : 0.032935385


7. The 75th percentile (third quartile) : USA :5.590302237  ,China : 3.77619059225 ,  Singapore :5.951974691   , EU:  -- , Japan:3.444634362   , Taiwan : --  , Thailand:4.588262668  , Indonesia: 9.91429983825, Hong Kong : 6.12487316 , South Korea :4.44049719625  , Vietnam :6.587522341 , India :7.638632996  , Australia : 6.0895808355 , Philippines : 6.3713172495 , United Arab Emirates : -- , Saudi Arabia : -- ,  Turkey : -- , United Kingdom :4.10514456575 , Brazil : 45.136493785 , Mexico : 4.8138175935 , Bangladesh : 7.80882370925 , Switzerland : 3.06700276399999 , Canada : 4.833121719, Russia : 5.131156731

8. The maximum value is : USA : 8.594600692 ,China :7.356478446  ,  Singapore :  9.725802426 , EU:  -- , Japan: 4.312357955  , Taiwan : --  , Thailand: 7.28526856925 , Indonesia:18.70733999 , Hong Kong : 13.13359646 , South Korea :10.7579741  , Vietnam :12.57720782 , India : 10.77463133 , Australia : 10.0928694 , Philippines : 14.23028288 , United Arab Emirates : -- , Saudi Arabia : -- ,  Turkey : -- , United Kingdom :6.720383583 , Brazil : 77.61683799 , Mexico : 14.85667585 , Bangladesh : 33.79505835 , Switzerland : 3.996447542 , Canada :10.36280576 , Russia : 19.61608056


"""

interest_rate.duplicated().sum()

interest_rate.isnull().sum()

interest_rate.columns = interest_rate.columns.str.strip()

interest_rate_date = 'Year'
interest_rate[interest_rate_date] = pd.to_datetime(interest_rate[interest_rate_date])

interest_rate['Year'] = interest_rate[interest_rate_date].dt.year

interest_rate_columns =['Year', 'Aruba', 'Africa Eastern and Southern',
                        'Afghanistan', 'Africa Western and Central',
                        'Angola', 'Albania', 'Andorra', 'Arab World',
                        'United Arab Emirates', 'Argentina', 'Armenia',
                        'American Samoa', 'Antigua and Barbuda', 'Australia',
                        'Austria', 'Azerbaijan', 'Burundi', 'Belgium', 'Benin',
                        'Burkina Faso', 'Bangladesh', 'Bulgaria', 'Bahrain',
                        'Bahamas, The', 'Bosnia and Herzegovina', 'Belarus',
                        'Belize', 'Bermuda', 'Bolivia', 'Brazil', 'Barbados',
                        'Brunei Darussalam', 'Bhutan', 'Botswana',
                        'Central African Republic', 'Canada',
                        'Central Europe and the Baltics', 'Switzerland',
                        'Channel Islands', 'Chile', 'China', "Cote d'Ivoire",
                        'Cameroon', 'Congo, Dem. Rep.', 'Congo, Rep.', 'Colombia',
                        'Comoros', 'Cabo Verde', 'Costa Rica', 'Caribbean small states',
                        'Cuba', 'Curacao', 'Cayman Islands', 'Cyprus', 'Czechia', 'Germany', 'Djibouti', 'Dominica', 'Denmark', 'Dominican Republic', 'Algeria', 'East Asia & Pacific (excluding high income)', 'Early-demographic dividend', 'East Asia & Pacific', 'Europe & Central Asia (excluding high income)', 'Europe & Central Asia', 'Ecuador', 'Egypt, Arab Rep.', 'Euro area', 'Eritrea', 'Spain', 'Estonia', 'Ethiopia', 'European Union', 'Fragile and conflict affected situations', 'Finland', 'Fiji', 'France', 'Faroe Islands', 'Micronesia, Fed. Sts.', 'Gabon', 'United Kingdom', 'Georgia', 'Ghana', 'Gibraltar', 'Guinea', 'Gambia, The', 'Guinea-Bissau', 'Equatorial Guinea', 'Greece', 'Grenada', 'Greenland', 'Guatemala', 'Guam', 'Guyana', 'High income', 'Hong Kong SAR, China', 'Honduras', 'Heavily indebted poor countries (HIPC)', 'Croatia', 'Haiti', 'Hungary', 'IBRD only', 'IDA & IBRD total', 'IDA total', 'IDA blend', 'Indonesia', 'IDA only', 'Isle of Man', 'India', 'Not classified', 'Ireland', 'Iran, Islamic Rep.', 'Iraq', 'Iceland', 'Israel', 'Italy', 'Jamaica', 'Jordan', 'Japan', 'Kazakhstan', 'Kenya', 'Kyrgyz Republic', 'Cambodia', 'Kiribati', 'St. Kitts and Nevis', 'Korea, Rep.', 'Kuwait', 'Latin America & Caribbean (excluding high income)', 'Lao PDR', 'Lebanon', 'Liberia', 'Libya', 'St. Lucia', 'Latin America & Caribbean', 'Least developed countries: UN classification', 'Low income', 'Liechtenstein', 'Sri Lanka', 'Lower middle income', 'Low & middle income', 'Lesotho', 'Late-demographic dividend', 'Lithuania', 'Luxembourg', 'Latvia', 'Macao SAR, China', 'St. Martin (French part)', 'Morocco', 'Monaco', 'Moldova', 'Madagascar', 'Maldives', 'Middle East & North Africa', 'Mexico', 'Marshall Islands', 'Middle income', 'North Macedonia', 'Mali', 'Malta', 'Myanmar', 'Middle East & North Africa (excluding high income)', 'Montenegro', 'Mongolia', 'Northern Mariana Islands', 'Mozambique', 'Mauritania', 'Mauritius', 'Malawi', 'Malaysia', 'North America', 'Namibia', 'New Caledonia', 'Niger', 'Nigeria', 'Nicaragua', 'Netherlands', 'Norway', 'Nepal', 'Nauru', 'New Zealand', 'OECD members', 'Oman', 'Other small states', 'Pakistan', 'Panama', 'Peru', 'Philippines', 'Palau', 'Papua New Guinea', 'Poland', 'Pre-demographic dividend', 'Puerto Rico', "Korea, Dem. People's Rep.", 'Portugal', 'Paraguay', 'West Bank and Gaza', 'Pacific island small states', 'Post-demographic dividend', 'French Polynesia', 'Qatar', 'Romania', 'Russian Federation', 'Rwanda', 'South Asia', 'Saudi Arabia', 'Sudan', 'Senegal', 'Singapore', 'Solomon Islands', 'Sierra Leone', 'El Salvador', 'San Marino', 'Somalia', 'Serbia', 'Sub-Saharan Africa (excluding high income)', 'South Sudan', 'Sub-Saharan Africa', 'Small states', 'Sao Tome and Principe', 'Suriname', 'Slovak Republic', 'Slovenia', 'Sweden', 'Eswatini', 'Sint Maarten (Dutch part)', 'Seychelles', 'Syrian Arab Republic', 'Turks and Caicos Islands', 'Chad', 'East Asia & Pacific (IDA & IBRD countries)', 'Europe & Central Asia (IDA & IBRD countries)', 'Togo', 'Thailand', 'Tajikistan', 'Turkmenistan', 'Latin America & the Caribbean (IDA & IBRD countries)', 'Timor-Leste', 'Middle East & North Africa (IDA & IBRD countries)', 'Tonga', 'South Asia (IDA & IBRD)', 'Sub-Saharan Africa (IDA & IBRD countries)', 'Trinidad and Tobago', 'Tunisia', 'Turkiye', 'Tuvalu', 'Tanzania', 'Uganda', 'Ukraine', 'Upper middle income', 'Uruguay', 'United States', 'Uzbekistan', 'St. Vincent and the Grenadines', 'Venezuela, RB', 'British Virgin Islands', 'Virgin Islands (U.S.)', 'Viet Nam', 'Vanuatu', 'World', 'Samoa', 'Kosovo', 'Yemen, Rep.', 'South Africa', 'Zambia', 'Zimbabwe']

yearly_avg = interest_rate.groupby('Year')[interest_rate_columns].mean()

if 'Year' in yearly_avg.columns:
    yearly_avg = yearly_avg.drop(columns=['Year'])

df_yearly_avg = yearly_avg.reset_index()

yearly_avg_interest_rate = 'Yearly_Avg_interest_rate.csv'
df_yearly_avg.to_csv(yearly_avg_interest_rate, index=False)

print(f"Yearly average inflation rate saved to {yearly_avg_interest_rate}")

yearly_avg_interest_rate = yearly_avg.reset_index()

print(type(yearly_avg_interest_rate))
print(yearly_avg_interest_rate.head(5))

"""## **C.) Gross Domestic Product (GDP)**"""

gdp = pd.read_csv("data/GDP.csv",skiprows = 0)

gdp.head(5)

gdp.tail()

gdp.shape

gdp.columns

gdp.info()

"""1. Year: int64, Non-Null Count: 64
2. Aruba: float64, Non-Null Count: 36
3. Africa Eastern and Southern: float64, Non-Null Count: 0
4. Afghanistan: float64, Non-Null Count: 12
5. Africa Western and Central: float64, Non-Null Count: 0
6. Angola: float64, Non-Null Count: 42
7. Albania: float64, Non-Null Count: 23
8. Andorra: float64, Non-Null Count: 0
9. Arab World: float64, Non-Null Count: 0
10. United Arab Emirates: float64, Non-Null Count: 17
11. Argentina: float64, Non-Null Count: 49
12. Armenia: float64, Non-Null Count: 34
13. Antigua and Barbuda: float64, Non-Null Count: 0
14. Australia: float64, Non-Null Count: 62
15. Austria: float64, Non-Null Count: 64
16. Azerbaijan: float64, Non-Null Count: 20
17. Burundi: float64, Non-Null Count: 38
18. Belgium: float64, Non-Null Count: 64
19. Benin: float64, Non-Null Count: 13
20. Burkina Faso: float64, Non-Null Count: 13
21. Bangladesh: float64, Non-Null Count: 37
22. Bulgaria: float64, Non-Null Count: 47
23. Bahrain: float64, Non-Null Count: 30
24. Bahamas, The: float64, Non-Null Count: 0
25. Bosnia and Herzegovina: float64, Non-Null Count: 11
26. Belarus: float64, Non-Null Count: 26
27. Belize: float64, Non-Null Count: 0
28. Bermuda: float64, Non-Null Count: 0
29. Bolivia: float64, Non-Null Count: 46
30. Brazil: float64, Non-Null Count: 64
31. Barbados: float64, Non-Null Count: 0
32. Brunei Darussalam: float64, Non-Null Count: 0
33. Bhutan: float64, Non-Null Count: 2
34. Botswana: float64, Non-Null Count: 17
35. Central African Republic: float64, Non-Null Count: 0
36. Canada: float64, Non-Null Count: 64
37. Central Europe and the Baltics: float64, Non-Null Count: 0
38. Switzerland: float64, Non-Null Count: 63
39. Channel Islands: float64, Non-Null Count: 0
40. Chile: float64, Non-Null Count: 64
41. China: float64, Non-Null Count: 41
42. Cote d'Ivoire: float64, Non-Null Count: 18
43. Cameroon: float64, Non-Null Count: 15
44. Congo, Dem. Rep.: float64, Non-Null Count: 8
45. Congo, Rep.: float64, Non-Null Count: 11
46. Colombia: float64, Non-Null Count: 64
47. Comoros: float64, Non-Null Count: 0
48. Cabo Verde: float64, Non-Null Count: 12
49. Costa Rica: float64, Non-Null Count: 63
50. Caribbean small states: float64, Non-Null Count: 0
51. Cuba: float64, Non-Null Count: 0
52. Curacao: float64, Non-Null Count: 0
53. Cayman Islands: float64, Non-Null Count: 0
54. Cyprus: float64, Non-Null Count: 62
55. Czech Republic: float64, Non-Null Count: 34
56. Germany: float64, Non-Null Count: 64
57. Djibouti: float64, Non-Null Count: 0
58. Dominica: float64, Non-Null Count: 0
59. Denmark: float64, Non-Null Count: 64
60. Dominican Republic: float64, Non-Null Count: 58
61. Algeria: float64, Non-Null Count: 29
62. East Asia & Pacific (excluding high income): float64, Non-Null Count: 0
63. Early-demographic dividend: float64, Non-Null Count: 0
64. East Asia & Pacific: float64, Non-Null Count: 0
65. Europe & Central Asia (excluding high income): float64, Non-Null Count: 0
66. Europe & Central Asia: float64, Non-Null Count: 0
67. Ecuador: float64, Non-Null Count: 64
68. Egypt, Arab Rep.: float64, Non-Null Count: 60
69. Euro area: float64, Non-Null Count: 64
70. Eritrea: float64, Non-Null Count: 0
71. Spain: float64, Non-Null Count: 64
72. Estonia: float64, Non-Null Count: 35
73. Eswatini: float64, Non-Null Count: 20
74. Ethiopia: float64, Non-Null Count: 11
75. European Union: float64, Non-Null Count: 64
76. Fragile and conflict affected situations: float64, Non-Null Count: 0
77. Finland: float64, Non-Null Count: 64
78. Fiji: float64, Non-Null Count: 14
79. France: float64, Non-Null Count: 64
80. Faroe Islands: float64, Non-Null Count: 0
81. Micronesia, Fed. Sts.: float64, Non-Null Count: 0
82. Gabon: float64, Non-Null Count: 0
83. United Kingdom: float64, Non-Null Count: 64
84. Georgia: float64, Non-Null Count: 36
85. Ghana: float64, Non-Null Count: 33
86. Gibraltar: float64, Non-Null Count: 0
87. Guinea: float64, Non-Null Count: 0
88. Gambia, The: float64, Non-Null Count: 12
89. Guinea-Bissau: float64, Non-Null Count: 0
90. Equatorial Guinea: float64, Non-Null Count: 0
91. Greece: float64, Non-Null Count: 64
92. Grenada: float64, Non-Null Count: 0
93. Greenland: float64, Non-Null Count: 0
94. Guatemala: float64, Non-Null Count: 40
95. Guam: float64, Non-Null Count: 0
96. Guyana: float64, Non-Null Count: 4
97. High income: float64, Non-Null Count: 0
98. Hong Kong SAR, China: float64, Non-Null Count: 64
99. Honduras: float64, Non-Null Count: 58
100. Heavily indebted poor countries (HIPC): float64, Non-Null Count: 0
101. Croatia: float64, Non-Null Count: 33
102. Haiti: float64, Non-Null Count: 24
103. Hungary: float64, Non-Null Count: 63
104. Indonesia: float64, Non-Null Count: 56
105. India: float64, Non-Null Count: 61
106. Ireland: float64, Non-Null Count: 64
107. Iran, Islamic Rep.: float64, Non-Null Count: 44
108. Iraq: float64, Non-Null Count: 10
109. Iceland: float64, Non-Null Count: 63
110. Israel: float64, Non-Null Count: 64
111. Italy: float64, Non-Null Count: 64
112. Jamaica: float64, Non-Null Count: 33
113. Jordan: float64, Non-Null Count: 39
114. Japan: float64, Non-Null Count: 64
115. Kazakhstan: float64, Non-Null Count: 32
116. Kenya: float64, Non-Null Count: 38
117. Kyrgyz Republic: float64, Non-Null Count: 20
118. Cambodia: float64, Non-Null Count: 3
119. Kiribati: float64, Non-Null Count: 0
120. St. Kitts and Nevis: float64, Non-Null Count: 0
121. Korea, Rep.: float64, Non-Null Count: 63
122. Kuwait: float64, Non-Null Count: 22
123. Latin America & Caribbean (excluding high income): float64, Non-Null Count: 0
124. Lebanon: float64, Non-Null Count: 36
125. Liberia: float64, Non-Null Count: 1
126. Libya: float64, Non-Null Count: 19
127. St. Lucia: float64, Non-Null Count: 0
128. Latin America & Caribbean: float64, Non-Null Count: 0
129. Least developed countries: UN classification: float64, Non-Null Count: 0
130. Low income: float64, Non-Null Count: 0
131. Liechtenstein: float64, Non-Null Count: 0
132. Sri Lanka: float64, Non-Null Count: 42
133. Lower middle income: float64, Non-Null Count: 0
134. Low & middle income: float64, Non-Null Count: 0
135. Lesotho: float64, Non-Null Count: 17
136. Late-demographic dividend: float64, Non-Null Count: 0
137. Lithuania: float64, Non-Null Count: 31
138. Luxembourg: float64, Non-Null Count: 62
139. Latvia: float64, Non-Null Count: 33
140. Macao SAR, China: float64, Non-Null Count: 0
141. St. Martin (French part): float64, Non-Null Count: 0
142. Morocco: float64, Non-Null Count: 54
143. Monaco: float64, Non-Null Count: 0
144. Moldova: float64, Non-Null Count: 24
145. Madagascar: float64, Non-Null Count: 5
146. Maldives: float64, Non-Null Count: 9
147. Middle East & North Africa: float64, Non-Null Count: 0
148. Mexico: float64, Non-Null Count: 63
149. Marshall Islands: float64, Non-Null Count: 0
150. Middle income: float64, Non-Null Count: 0
151. North Macedonia: float64, Non-Null Count: 30
152. Mali: float64, Non-Null Count: 16
153. Malta: float64, Non-Null Count: 62
154. Myanmar: float64, Non-Null Count: 3
155. Middle East & North Africa (excluding high income): float64, Non-Null Count: 0
156. Montenegro: float64, Non-Null Count: 13
157. Mongolia: float64, Non-Null Count: 10
158. Northern Mariana Islands: float64, Non-Null Count: 0
159. Mozambique: float64, Non-Null Count: 9
160. Mauritania: float64, Non-Null Count: 3
161. Mauritius: float64, Non-Null Count: 43
162. Malawi: float64, Non-Null Count: 3
163. Malaysia: float64, Non-Null Count: 57
164. North America: float64, Non-Null Count: 0
165. Namibia: float64, Non-Null Count: 16
166. New Caledonia: float64, Non-Null Count: 0
167. Niger: float64, Non-Null Count: 12
168. Nigeria: float64, Non-Null Count: 41
169. Nicaragua: float64, Non-Null Count: 27
170. Netherlands: float64, Non-Null Count: 64
171. Norway: float64, Non-Null Count: 64
172. Nepal: float64, Non-Null Count: 28
173. Nauru: float64, Non-Null Count: 0
174. New Zealand: float64, Non-Null Count: 62
175. OECD members: float64, Non-Null Count: 0
176. Oman: float64, Non-Null Count: 21
177. Other small states: float64, Non-Null Count: 0
178. Pakistan: float64, Non-Null Count: 57
179. Panama: float64, Non-Null Count: 59
180. Peru: float64, Non-Null Count: 63
181. Philippines: float64, Non-Null Count: 56
182. Palau: float64, Non-Null Count: 0
183. Papua New Guinea: float64, Non-Null Count: 0
184. Poland: float64, Non-Null Count: 63
185. Puerto Rico: float64, Non-Null Count: 0
186. Korea, Dem. People's Rep.: float64, Non-Null Count: 0
187. Portugal: float64, Non-Null Count: 64
188. Paraguay: float64, Non-Null Count: 62
189. West Bank and Gaza: float64, Non-Null Count: 6
190. Pacific island small states: float64, Non-Null Count: 0
191. Post-demographic dividend: float64, Non-Null Count: 0
192. French Polynesia: float64, Non-Null Count: 0
193. Qatar: float64, Non-Null Count: 18
194. Romania: float64, Non-Null Count: 61
195. Russian Federation: float64, Non-Null Count: 61
196. Rwanda: float64, Non-Null Count: 24
197. South Asia: float64, Non-Null Count: 0
198. Saudi Arabia: float64, Non-Null Count: 22
199. Sudan: float64, Non-Null Count: 24
200. Senegal: float64, Non-Null Count: 17
201. Singapore: float64, Non-Null Count: 64
202. Solomon Islands: float64, Non-Null Count: 1
203. Sierra Leone: float64, Non-Null Count: 11
204. El Salvador: float64, Non-Null Count: 47
205. San Marino: float64, Non-Null Count: 0
206. Somalia: float64, Non-Null Count: 0
207. Serbia: float64, Non-Null Count: 29
208. Sub-Saharan Africa (excluding high income): float64, Non-Null Count: 0
209. South Sudan: float64, Non-Null Count: 6
210. Sub-Saharan Africa: float64, Non-Null Count: 0
211. Small states: float64, Non-Null Count: 0
212. Sao Tome and Principe: float64, Non-Null Count: 6
213. Suriname: float64, Non-Null Count: 2
214. Slovak Republic: float64, Non-Null Count: 31
215. Slovenia: float64, Non-Null Count: 33
216. Sweden: float64, Non-Null Count: 64
217. Eswatini: float64, Non-Null Count: 0
218. Seychelles: float64, Non-Null Count: 7
219. Syrian Arab Republic: float64, Non-Null Count: 8
220. Turks and Caicos Islands: float64, Non-Null Count: 0
221. Chad: float64, Non-Null Count: 2
222. Togo: float64, Non-Null Count: 10
223. Thailand: float64, Non-Null Count: 63
224. Tajikistan: float64, Non-Null Count: 20
225. Turkmenistan: float64, Non-Null Count: 8
226. Latin America & Caribbean (IDA & IBRD countries): float64, Non-Null Count: 0
227. Timor-Leste: float64, Non-Null Count: 0
228. Middle East & North Africa (IDA & IBRD countries): float64, Non-Null Count: 0
229. Tonga: float64, Non-Null Count: 2
230. South Asia (IDA & IBRD): float64, Non-Null Count: 0
231. Sub-Saharan Africa (IDA & IBRD countries): float64, Non-Null Count: 0
232. Trinidad and Tobago: float64, Non-Null Count: 15
233. Tunisia: float64, Non-Null Count: 37
234. Turkey: float64, Non-Null Count: 64
235. Tuvalu: float64, Non-Null Count: 0
236. Tanzania: float64, Non-Null Count: 14
237. Uganda: float64, Non-Null Count: 31
238. Ukraine: float64, Non-Null Count: 48
239. Upper middle income: float64, Non-Null Count: 0
240. Uruguay: float64, Non-Null Count: 64
241. United States: float64, Non-Null Count: 64
242. Uzbekistan: float64, Non-Null Count: 16
243. St. Vincent and the Grenadines: float64, Non-Null Count: 0
244. Venezuela, RB: float64, Non-Null Count: 42
245. British Virgin Islands: float64, Non-Null Count: 0
246. Virgin Islands (U.S.): float64, Non-Null Count: 0
247. Vietnam: float64, Non-Null Count: 61
248. Vanuatu: float64, Non-Null Count: 0
249. West Bank and Gaza: float64, Non-Null Count: 10
250. Samoa: float64, Non-Null Count: 4
251. Yemen, Rep.: float64, Non-Null Count: 13
252. South Africa: float64, Non-Null Count: 63
253. Zambia: float64, Non-Null Count: 16
254. Zimbabwe: float64, Non-Null Count: 17

"""

gdp.dtypes

"""Year: int64
Aruba: float64
Africa Eastern and Southern: float64
Afghanistan: float64
Africa Western and Central: float64
Angola: float64
Albania: float64
Andorra: float64
Arab World: float64
United Arab Emirates: float64
Argentina: float64
Armenia: float64
Antigua and Barbuda: float64
Australia: float64
Austria: float64
Azerbaijan: float64
Burundi: float64
Belgium: float64
Benin: float64
Burkina Faso: float64
Bangladesh: float64
Bulgaria: float64
Bahrain: float64
Bahamas, The: float64
Bosnia and Herzegovina: float64
Belarus: float64
Belize: float64
Bermuda: float64
Bolivia: float64
Brazil: float64
Barbados: float64
Brunei Darussalam: float64
Bhutan: float64
Botswana: float64
Central African Republic: float64
Canada: float64
Central Europe and the Baltics: float64
Switzerland: float64
Channel Islands: float64
Chile: float64
China: float64
Cote d'Ivoire: float64
Cameroon: float64
Congo, Dem. Rep.: float64
Congo, Rep.: float64
Colombia: float64
Comoros: float64
Cabo Verde: float64
Costa Rica: float64
Caribbean small states: float64
Cuba: float64
Curacao: float64
Cayman Islands: float64
Cyprus: float64
Czech Republic: float64
Germany: float64
Djibouti: float64
Dominica: float64
Denmark: float64
Dominican Republic: float64
Algeria: float64
East Asia & Pacific (excluding high income): float64
Early-demographic dividend: float64
East Asia & Pacific: float64
Europe & Central Asia (excluding high income): float64
Europe & Central Asia: float64
Ecuador: float64
Egypt, Arab Rep.: float64
Euro area: float64
Eritrea: float64
Spain: float64
Estonia: float64
Eswatini: float64
Ethiopia: float64
European Union: float64
Fragile and conflict affected situations: float64
Finland: float64
Fiji: float64
France: float64
Faroe Islands: float64
Micronesia, Fed. Sts.: float64
Gabon: float64
United Kingdom: float64
Georgia: float64
Ghana: float64
Gibraltar: float64
Guinea: float64
Gambia, The: float64
Guinea-Bissau: float64
Equatorial Guinea: float64
Greece: float64
Grenada: float64
Greenland: float64
Guatemala: float64
Guam: float64
Guyana: float64
High income: float64
Hong Kong SAR, China: float64
Honduras: float64
Heavily indebted poor countries (HIPC): float64
Croatia: float64
Haiti: float64
Hungary: float64
Indonesia: float64
India: float64
Ireland: float64
Iran, Islamic Rep.: float64
Iraq: float64
Iceland: float64
Israel: float64
Italy: float64
Jamaica: float64
Jordan: float64
Japan: float64
Kazakhstan: float64
Kenya: float64
Kyrgyz Republic: float64
Cambodia: float64
Kiribati: float64
St. Kitts and Nevis: float64
Korea, Rep.: float64
Kuwait: float64
Latin America & Caribbean (excluding high income): float64
Lebanon: float64
Liberia: float64
Libya: float64
St. Lucia: float64
Latin America & Caribbean: float64
Least developed countries: UN classification: float64
Low income: float64
Liechtenstein: float64
Sri Lanka: float64
Lower middle income: float64
Low & middle income: float64
Lesotho: float64
Late-demographic dividend: float64
Lithuania: float64
Luxembourg: float64
Latvia: float64
Macao SAR, China: float64
St. Martin (French part): float64
Morocco: float64
Monaco: float64
Moldova: float64
Madagascar: float64
Maldives: float64
Middle East & North Africa: float64
Mexico: float64
Marshall Islands: float64
Middle income: float64
North Macedonia: float64
Mali: float64
Malta: float64
Myanmar: float64
Middle East & North Africa (excluding high income): float64
Montenegro: float64
Mongolia: float64
Northern Mariana Islands: float64
Mozambique: float64
Mauritania: float64
Mauritius: float64
Malawi: float64
Malaysia: float64
North America: float64
Namibia: float64
New Caledonia: float64
Niger: float64
Nigeria: float64
Nicaragua: float64
Netherlands: float64
Norway: float64
Nepal: float64
Nauru: float64
New Zealand: float64
OECD members: float64
Oman: float64
Other small states: float64
Pakistan: float64
Panama: float64
Peru: float64
Philippines: float64
Palau: float64
Papua New Guinea: float64
Poland: float64
Puerto Rico: float64
Korea, Dem. People's Rep.: float64
Portugal: float64
Paraguay: float64
West Bank and Gaza: float64
Pacific island small states: float64
Post-demographic dividend: float64
French Polynesia: float64
Qatar: float64
Romania: float64
Russian Federation: float64
Rwanda: float64
South Asia: float64
Saudi Arabia: float64
Sudan: float64
Senegal: float64
Singapore: float64
Solomon Islands: float64
Sierra Leone: float64
El Salvador: float64
San Marino: float64
Somalia: float64
Serbia: float64
Sub-Saharan Africa (excluding high income): float64
South Sudan: float64
Sub-Saharan Africa: float64
Small states: float64
Sao Tome and Principe: float64
Suriname: float64
Slovak Republic: float64
Slovenia: float64
Sweden: float64
Eswatini: float64
Seychelles: float64
Syrian Arab Republic: float64
Turks and Caicos Islands: float64
Chad: float64
Togo: float64
Thailand: float64
Tajikistan: float64
Turkmenistan: float64
Latin America & Caribbean (IDA & IBRD countries): float64
Timor-Leste: float64
Middle East & North Africa (IDA & IBRD countries): float64
Tonga: float64
South Asia (IDA & IBRD): float64
Sub-Saharan Africa (IDA & IBRD countries): float64
Trinidad and Tobago: float64
Tunisia: float64
Turkey: float64
Tuvalu: float64
Tanzania: float64
Uganda: float64
Ukraine: float64
Upper middle income: float64
Uruguay: float64
United States: float64
Uzbekistan: float64
St. Vincent and the Grenadines: float64
Venezuela, RB: float64
British Virgin Islands: float64
Virgin Islands (U.S.): float64
Vietnam: float64
Vanuatu: float64
World: float64
Samoa: float64
Kosovo: float64
Yemen, Rep.: float64
South Africa: float64
Zambia: float64
Zimbabwe: float64
"""

gdp.describe()

"""1.   **The count (number of values)** : All GDP pairs have 64 data points.



2.   The mean (average value) : USA : 8537718750000  ,China : 3292084208750.28 ,  Singapore :  113439339929.878 , EU: 7243687500000  , Japan: 2939248153703.48  , Taiwan : --  , Thailand: 159179395767.187 , Indonesia: 353306531314.438, Hong Kong : 128191952447.796 , South Korea : 557977307989.375 , Vietnam : 123584832194.743, India : 785029506795.953 , Australia : 522021345144.265 , Philippines : 110923575857.203 , United Arab Emirates :159708647926.59  , Saudi Arabia : 269249333259.781 ,  Turkey : -- , United Kingdom : 1345096765901.79, Brazil : 1286142857142.85 , Mexico :  539109186602.328, Bangladesh : 82816166448.9218 , Switzerland : 305596828272.828 , Canada : 755446773153.421, Russia : 1061777777777.77



3. The standard deviation (variability of data) :  USA : 7425914329826.9 ,China : 5245998880629.39 ,  Singapore : 141265819712.898  , EU: 5899217765941.51  , Japan:  2127229693707.67 , Taiwan : --  , Thailand: 172191604378.011 , Indonesia:409269916068.399 , Hong Kong : 123565925702.527 , South Korea : 602712377992.942 , Vietnam :131802324505.907 , India : 980493761356.746 , Australia :543237209999.301  , Philippines : 124888735605.895 , United Arab Emirates : 160044375159.486 , Saudi Arabia :  303516933014.669,  Turkey :--  , United Kingdom : 1117499654751.67, Brazil : 749472800701.664 , Mexico : 506032972280.209 , Bangladesh : 117655472041.093 , Switzerland : 267464215336.753 , Canada :663174751313.619 , Russia : 702234316251.089


4. The minimum value :
 USA : 542000000000 ,China : 47209186415 ,  Singapore : 704751700.3  , EU:  285000000000 , Japan: 47419238274  , Taiwan : --  , Thailand: 2760750861 , Indonesia:5667756628 , Hong Kong : 1320796652 , South Korea : 2417628737 , Vietnam : 6293304975, India : 37029883876 , Australia : 18606562977 , Philippines : 4954593072 , United Arab Emirates : 685986701.3 , Saudi Arabia : 1748124063 ,  Turkey :  --, United Kingdom : 73233967692, Brazil : 328000000000 , Mexico : 13040000000 , Bangladesh : 4274894083 , Switzerland : 10412232621 , Canada : 40563768947, Russia : 196000000000


5. The 25th percentile (first quartile) :  USA :1822500000000  ,China : 153000000000 ,  Singapore : 6153726963  , EU: 1760000000000  , Japan: 582500000000  , Taiwan : --  , Thailand: 16459599134.5 , Indonesia: 75929617558, Hong Kong : 12169296896.25 , South Korea : 27872933884.5 , Vietnam :25880214449.5 , India : 102131649483.5 , Australia :103075754472.25  , Philippines : 18754601568.75 , United Arab Emirates : 40818986652.5 , Saudi Arabia :59697551452.25  ,  Turkey : -- , United Kingdom : 239750000000, Brazil : 580000000000 , Mexico : 86478004696 , Bangladesh : 11913623723.25 , Switzerland : 67723913937.75 , Canada : 198750000000, Russia : 423750000000


6. The 50th percentile (median) :  USA : 6340000000000 ,China : 405000000000  ,  Singapore : 48798742505.5  , EU: 6740000000000  , Japan: 3815000000000  , Taiwan :  -- , Thailand: 104617357485.5 , Indonesia:158000000000 , Hong Kong : 96479998950 , South Korea : 343500000000 , Vietnam :45427854693 , India : 296500000000 , Australia : 317500000000 , Philippines : 56103236592.5 , United Arab Emirates : 74622785139.5 , Saudi Arabia : 140000000000 ,  Turkey : -- , United Kingdom : 1115000000000, Brazil : 1110000000000 , Mexico : 338000000000 , Bangladesh : 31653607686 , Switzerland : 270500000000 , Canada :587000000000 , Russia : 877000000000


7. The 75th percentile (third quartile) :  USA : 6340000000000 ,China : 3810000000000 ,  Singapore : 184250000000  , EU: 13675000000000  , Japan: 4905000000000  , Taiwan :  -- , Thailand: 267750000000 , Indonesia:540000000000 , Hong Kong : 212500000000 , South Korea : 1050000000000 , Vietnam : 223500000000, India : 1205000000000 , Australia : 873500000000 , Philippines : 161000000000 , United Arab Emirates : 311250000000 , Saudi Arabia : 419250000000 ,  Turkey :--  , United Kingdom :2570000000000 , Brazil : 1895000000000 , Mexico : 1040000000000 , Bangladesh : 82617983099.25 , Switzerland : 506750000000 , Canada :1395000000000 , Russia : 1660000000000


8. The maximum value is : USA : 27400000000000  ,China : 17900000000000 ,  Singapore : 501000000000  , EU: 18300000000000  , Japan: 6270000000000  , Taiwan :  -- , Thailand: 544000000000 , Indonesia: 1370000000000, Hong Kong : 382000000000 , South Korea : 1820000000000 , Vietnam : 430000000000, India : 3550000000000 , Australia : 1720000000000 , Philippines : 437000000000 , United Arab Emirates : 507000000000 , Saudi Arabia : 1110000000000 ,  Turkey : -- , United Kingdom :3340000000000 , Brazil : 2620000000000 , Mexico : 1790000000000 , Bangladesh : 460000000000 , Switzerland :885000000000  , Canada :2160000000000 , Russia : 2290000000000

"""

gdp.duplicated().sum()

gdp.isnull().sum()

gdp.columns = gdp.columns.str.strip()

gdp_date = 'Year'
gdp[gdp_date] = pd.to_datetime(gdp[gdp_date])

gdp['Year'] = gdp[gdp_date].dt.year

gdp_columns =['Year', 'Aruba', 'Africa Eastern and Southern',
                        'Afghanistan', 'Africa Western and Central',
                        'Angola', 'Albania', 'Andorra', 'Arab World',
                        'United Arab Emirates', 'Argentina', 'Armenia',
                        'American Samoa', 'Antigua and Barbuda', 'Australia',
                        'Austria', 'Azerbaijan', 'Burundi', 'Belgium', 'Benin',
                        'Burkina Faso', 'Bangladesh', 'Bulgaria', 'Bahrain',
                        'Bahamas, The', 'Bosnia and Herzegovina', 'Belarus',
                        'Belize', 'Bermuda', 'Bolivia', 'Brazil', 'Barbados',
                        'Brunei Darussalam', 'Bhutan', 'Botswana',
                        'Central African Republic', 'Canada',
                        'Central Europe and the Baltics', 'Switzerland',
                        'Channel Islands', 'Chile', 'China', "Cote d'Ivoire",
                        'Cameroon', 'Congo, Dem. Rep.', 'Congo, Rep.', 'Colombia',
                        'Comoros', 'Cabo Verde', 'Costa Rica', 'Caribbean small states',
                        'Cuba', 'Curacao', 'Cayman Islands', 'Cyprus', 'Czechia', 'Germany', 'Djibouti', 'Dominica', 'Denmark', 'Dominican Republic', 'Algeria', 'East Asia & Pacific (excluding high income)', 'Early-demographic dividend', 'East Asia & Pacific', 'Europe & Central Asia (excluding high income)', 'Europe & Central Asia', 'Ecuador', 'Egypt, Arab Rep.', 'Euro area', 'Eritrea', 'Spain', 'Estonia', 'Ethiopia', 'European Union', 'Fragile and conflict affected situations', 'Finland', 'Fiji', 'France', 'Faroe Islands', 'Micronesia, Fed. Sts.', 'Gabon', 'United Kingdom', 'Georgia', 'Ghana', 'Gibraltar', 'Guinea', 'Gambia, The', 'Guinea-Bissau', 'Equatorial Guinea', 'Greece', 'Grenada', 'Greenland', 'Guatemala', 'Guam', 'Guyana', 'High income', 'Hong Kong SAR, China', 'Honduras', 'Heavily indebted poor countries (HIPC)', 'Croatia', 'Haiti', 'Hungary', 'IBRD only', 'IDA & IBRD total', 'IDA total', 'IDA blend', 'Indonesia', 'IDA only', 'Isle of Man', 'India', 'Not classified', 'Ireland', 'Iran, Islamic Rep.', 'Iraq', 'Iceland', 'Israel', 'Italy', 'Jamaica', 'Jordan', 'Japan', 'Kazakhstan', 'Kenya', 'Kyrgyz Republic', 'Cambodia', 'Kiribati', 'St. Kitts and Nevis', 'Korea, Rep.', 'Kuwait', 'Latin America & Caribbean (excluding high income)', 'Lao PDR', 'Lebanon', 'Liberia', 'Libya', 'St. Lucia', 'Latin America & Caribbean', 'Least developed countries: UN classification', 'Low income', 'Liechtenstein', 'Sri Lanka', 'Lower middle income', 'Low & middle income', 'Lesotho', 'Late-demographic dividend', 'Lithuania', 'Luxembourg', 'Latvia', 'Macao SAR, China', 'St. Martin (French part)', 'Morocco', 'Monaco', 'Moldova', 'Madagascar', 'Maldives', 'Middle East & North Africa', 'Mexico', 'Marshall Islands', 'Middle income', 'North Macedonia', 'Mali', 'Malta', 'Myanmar', 'Middle East & North Africa (excluding high income)', 'Montenegro', 'Mongolia', 'Northern Mariana Islands', 'Mozambique', 'Mauritania', 'Mauritius', 'Malawi', 'Malaysia', 'North America', 'Namibia', 'New Caledonia', 'Niger', 'Nigeria', 'Nicaragua', 'Netherlands', 'Norway', 'Nepal', 'Nauru', 'New Zealand', 'OECD members', 'Oman', 'Other small states', 'Pakistan', 'Panama', 'Peru', 'Philippines', 'Palau', 'Papua New Guinea', 'Poland', 'Pre-demographic dividend', 'Puerto Rico', "Korea, Dem. People's Rep.", 'Portugal', 'Paraguay', 'West Bank and Gaza', 'Pacific island small states', 'Post-demographic dividend', 'French Polynesia', 'Qatar', 'Romania', 'Russian Federation', 'Rwanda', 'South Asia', 'Saudi Arabia', 'Sudan', 'Senegal', 'Singapore', 'Solomon Islands', 'Sierra Leone', 'El Salvador', 'San Marino', 'Somalia', 'Serbia', 'Sub-Saharan Africa (excluding high income)', 'South Sudan', 'Sub-Saharan Africa', 'Small states', 'Sao Tome and Principe', 'Suriname', 'Slovak Republic', 'Slovenia', 'Sweden', 'Eswatini', 'Sint Maarten (Dutch part)', 'Seychelles', 'Syrian Arab Republic', 'Turks and Caicos Islands', 'Chad', 'East Asia & Pacific (IDA & IBRD countries)', 'Europe & Central Asia (IDA & IBRD countries)', 'Togo', 'Thailand', 'Tajikistan', 'Turkmenistan', 'Latin America & the Caribbean (IDA & IBRD countries)', 'Timor-Leste', 'Middle East & North Africa (IDA & IBRD countries)', 'Tonga', 'South Asia (IDA & IBRD)', 'Sub-Saharan Africa (IDA & IBRD countries)', 'Trinidad and Tobago', 'Tunisia', 'Turkiye', 'Tuvalu', 'Tanzania', 'Uganda', 'Ukraine', 'Upper middle income', 'Uruguay', 'United States', 'Uzbekistan', 'St. Vincent and the Grenadines', 'Venezuela, RB', 'British Virgin Islands', 'Virgin Islands (U.S.)', 'Viet Nam', 'Vanuatu', 'World', 'Samoa', 'Kosovo', 'Yemen, Rep.', 'South Africa', 'Zambia', 'Zimbabwe']

yearly_avg = gdp.groupby('Year')[gdp_columns].mean()

if 'Year' in yearly_avg.columns:
    yearly_avg = yearly_avg.drop(columns=['Year'])

df_yearly_avg = yearly_avg.reset_index()

yearly_avg_gdp = 'Yearly_Avg_gdp.csv'
df_yearly_avg.to_csv(yearly_avg_gdp, index=False)

print(f"Yearly average gdp saved to {yearly_avg_gdp}")

yearly_avg_gdp = yearly_avg.reset_index()

print(type(yearly_avg_gdp))
print(yearly_avg_gdp.head(5))

"""## **D.) Unemployed Rate**"""

unemployment_rate = pd.read_csv("data/Unemployment_Rate.csv",skiprows = 0)

unemployment_rate.head(5)

unemployment_rate.tail(5)

unemployment_rate.shape

unemployment_rate.columns

unemployment_rate.info()

"""1. Year: int64, Non-Null Count: 64
2. Aruba: float64, Non-Null Count: 36
3. Africa Eastern and Southern: float64, Non-Null Count: 0
4. Afghanistan: float64, Non-Null Count: 12
5. Africa Western and Central: float64, Non-Null Count: 0
6. Angola: float64, Non-Null Count: 42
7. Albania: float64, Non-Null Count: 23
8. Andorra: float64, Non-Null Count: 0
9. Arab World: float64, Non-Null Count: 0
10. United Arab Emirates: float64, Non-Null Count: 17
11. Argentina: float64, Non-Null Count: 49
12. Armenia: float64, Non-Null Count: 34
13. Antigua and Barbuda: float64, Non-Null Count: 0
14. Australia: float64, Non-Null Count: 62
15. Austria: float64, Non-Null Count: 64
16. Azerbaijan: float64, Non-Null Count: 20
17. Burundi: float64, Non-Null Count: 38
18. Belgium: float64, Non-Null Count: 64
19. Benin: float64, Non-Null Count: 13
20. Burkina Faso: float64, Non-Null Count: 13
21. Bangladesh: float64, Non-Null Count: 37
22. Bulgaria: float64, Non-Null Count: 47
23. Bahrain: float64, Non-Null Count: 30
24. Bahamas, The: float64, Non-Null Count: 0
25. Bosnia and Herzegovina: float64, Non-Null Count: 11
26. Belarus: float64, Non-Null Count: 26
27. Belize: float64, Non-Null Count: 0
28. Bermuda: float64, Non-Null Count: 0
29. Bolivia: float64, Non-Null Count: 46
30. Brazil: float64, Non-Null Count: 64
31. Barbados: float64, Non-Null Count: 0
32. Brunei Darussalam: float64, Non-Null Count: 0
33. Bhutan: float64, Non-Null Count: 2
34. Botswana: float64, Non-Null Count: 17
35. Central African Republic: float64, Non-Null Count: 0
36. Canada: float64, Non-Null Count: 64
37. Central Europe and the Baltics: float64, Non-Null Count: 0
38. Switzerland: float64, Non-Null Count: 63
39. Channel Islands: float64, Non-Null Count: 0
40. Chile: float64, Non-Null Count: 64
41. China: float64, Non-Null Count: 41
42. Cote d'Ivoire: float64, Non-Null Count: 18
43. Cameroon: float64, Non-Null Count: 15
44. Congo, Dem. Rep.: float64, Non-Null Count: 8
45. Congo, Rep.: float64, Non-Null Count: 11
46. Colombia: float64, Non-Null Count: 64
47. Comoros: float64, Non-Null Count: 0
48. Cabo Verde: float64, Non-Null Count: 12
49. Costa Rica: float64, Non-Null Count: 63
50. Caribbean small states: float64, Non-Null Count: 0
51. Cuba: float64, Non-Null Count: 0
52. Curacao: float64, Non-Null Count: 0
53. Cayman Islands: float64, Non-Null Count: 0
54. Cyprus: float64, Non-Null Count: 62
55. Czech Republic: float64, Non-Null Count: 34
56. Germany: float64, Non-Null Count: 64
57. Djibouti: float64, Non-Null Count: 0
58. Dominica: float64, Non-Null Count: 0
59. Denmark: float64, Non-Null Count: 64
60. Dominican Republic: float64, Non-Null Count: 58
61. Algeria: float64, Non-Null Count: 29
62. East Asia & Pacific (excluding high income): float64, Non-Null Count: 0
63. Early-demographic dividend: float64, Non-Null Count: 0
64. East Asia & Pacific: float64, Non-Null Count: 0
65. Europe & Central Asia (excluding high income): float64, Non-Null Count: 0
66. Europe & Central Asia: float64, Non-Null Count: 0
67. Ecuador: float64, Non-Null Count: 64
68. Egypt, Arab Rep.: float64, Non-Null Count: 60
69. Euro area: float64, Non-Null Count: 64
70. Eritrea: float64, Non-Null Count: 0
71. Spain: float64, Non-Null Count: 64
72. Estonia: float64, Non-Null Count: 35
73. Eswatini: float64, Non-Null Count: 20
74. Ethiopia: float64, Non-Null Count: 11
75. European Union: float64, Non-Null Count: 64
76. Fragile and conflict affected situations: float64, Non-Null Count: 0
77. Finland: float64, Non-Null Count: 64
78. Fiji: float64, Non-Null Count: 14
79. France: float64, Non-Null Count: 64
80. Faroe Islands: float64, Non-Null Count: 0
81. Micronesia, Fed. Sts.: float64, Non-Null Count: 0
82. Gabon: float64, Non-Null Count: 0
83. United Kingdom: float64, Non-Null Count: 64
84. Georgia: float64, Non-Null Count: 36
85. Ghana: float64, Non-Null Count: 33
86. Gibraltar: float64, Non-Null Count: 0
87. Guinea: float64, Non-Null Count: 0
88. Gambia, The: float64, Non-Null Count: 12
89. Guinea-Bissau: float64, Non-Null Count: 0
90. Equatorial Guinea: float64, Non-Null Count: 0
91. Greece: float64, Non-Null Count: 64
92. Grenada: float64, Non-Null Count: 0
93. Greenland: float64, Non-Null Count: 0
94. Guatemala: float64, Non-Null Count: 40
95. Guam: float64, Non-Null Count: 0
96. Guyana: float64, Non-Null Count: 4
97. High income: float64, Non-Null Count: 0
98. Hong Kong SAR, China: float64, Non-Null Count: 64
99. Honduras: float64, Non-Null Count: 58
100. Heavily indebted poor countries (HIPC): float64, Non-Null Count: 0
101. Croatia: float64, Non-Null Count: 33
102. Haiti: float64, Non-Null Count: 24
103. Hungary: float64, Non-Null Count: 63
104. Indonesia: float64, Non-Null Count: 56
105. India: float64, Non-Null Count: 61
106. Ireland: float64, Non-Null Count: 64
107. Iran, Islamic Rep.: float64, Non-Null Count: 44
108. Iraq: float64, Non-Null Count: 10
109. Iceland: float64, Non-Null Count: 63
110. Israel: float64, Non-Null Count: 64
111. Italy: float64, Non-Null Count: 64
112. Jamaica: float64, Non-Null Count: 33
113. Jordan: float64, Non-Null Count: 39
114. Japan: float64, Non-Null Count: 64
115. Kazakhstan: float64, Non-Null Count: 32
116. Kenya: float64, Non-Null Count: 38
117. Kyrgyz Republic: float64, Non-Null Count: 20
118. Cambodia: float64, Non-Null Count: 3
119. Kiribati: float64, Non-Null Count: 0
120. St. Kitts and Nevis: float64, Non-Null Count: 0
121. Korea, Rep.: float64, Non-Null Count: 63
122. Kuwait: float64, Non-Null Count: 22
123. Latin America & Caribbean (excluding high income): float64, Non-Null Count: 0
124. Lebanon: float64, Non-Null Count: 36
125. Liberia: float64, Non-Null Count: 1
126. Libya: float64, Non-Null Count: 19
127. St. Lucia: float64, Non-Null Count: 0
128. Latin America & Caribbean: float64, Non-Null Count: 0
129. Least developed countries: UN classification: float64, Non-Null Count: 0
130. Low income: float64, Non-Null Count: 0
131. Liechtenstein: float64, Non-Null Count: 0
132. Sri Lanka: float64, Non-Null Count: 42
133. Lower middle income: float64, Non-Null Count: 0
134. Low & middle income: float64, Non-Null Count: 0
135. Lesotho: float64, Non-Null Count: 17
136. Late-demographic dividend: float64, Non-Null Count: 0
137. Lithuania: float64, Non-Null Count: 31
138. Luxembourg: float64, Non-Null Count: 62
139. Latvia: float64, Non-Null Count: 33
140. Macao SAR, China: float64, Non-Null Count: 0
141. St. Martin (French part): float64, Non-Null Count: 0
142. Morocco: float64, Non-Null Count: 54
143. Monaco: float64, Non-Null Count: 0
144. Moldova: float64, Non-Null Count: 24
145. Madagascar: float64, Non-Null Count: 5
146. Maldives: float64, Non-Null Count: 9
147. Middle East & North Africa: float64, Non-Null Count: 0
148. Mexico: float64, Non-Null Count: 63
149. Marshall Islands: float64, Non-Null Count: 0
150. Middle income: float64, Non-Null Count: 0
151. North Macedonia: float64, Non-Null Count: 30
152. Mali: float64, Non-Null Count: 16
153. Malta: float64, Non-Null Count: 62
154. Myanmar: float64, Non-Null Count: 3
155. Middle East & North Africa (excluding high income): float64, Non-Null Count: 0
156. Montenegro: float64, Non-Null Count: 13
157. Mongolia: float64, Non-Null Count: 10
158. Northern Mariana Islands: float64, Non-Null Count: 0
159. Mozambique: float64, Non-Null Count: 9
160. Mauritania: float64, Non-Null Count: 3
161. Mauritius: float64, Non-Null Count: 43
162. Malawi: float64, Non-Null Count: 3
163. Malaysia: float64, Non-Null Count: 57
164. North America: float64, Non-Null Count: 0
165. Namibia: float64, Non-Null Count: 16
166. New Caledonia: float64, Non-Null Count: 0
167. Niger: float64, Non-Null Count: 12
168. Nigeria: float64, Non-Null Count: 41
169. Nicaragua: float64, Non-Null Count: 27
170. Netherlands: float64, Non-Null Count: 64
171. Norway: float64, Non-Null Count: 64
172. Nepal: float64, Non-Null Count: 28
173. Nauru: float64, Non-Null Count: 0
174. New Zealand: float64, Non-Null Count: 62
175. OECD members: float64, Non-Null Count: 0
176. Oman: float64, Non-Null Count: 21
177. Other small states: float64, Non-Null Count: 0
178. Pakistan: float64, Non-Null Count: 57
179. Panama: float64, Non-Null Count: 59
180. Peru: float64, Non-Null Count: 63
181. Philippines: float64, Non-Null Count: 56
182. Palau: float64, Non-Null Count: 0
183. Papua New Guinea: float64, Non-Null Count: 0
184. Poland: float64, Non-Null Count: 63
185. Puerto Rico: float64, Non-Null Count: 0
186. Korea, Dem. People's Rep.: float64, Non-Null Count: 0
187. Portugal: float64, Non-Null Count: 64
188. Paraguay: float64, Non-Null Count: 62
189. West Bank and Gaza: float64, Non-Null Count: 6
190. Pacific island small states: float64, Non-Null Count: 0
191. Post-demographic dividend: float64, Non-Null Count: 0
192. French Polynesia: float64, Non-Null Count: 0
193. Qatar: float64, Non-Null Count: 18
194. Romania: float64, Non-Null Count: 61
195. Russian Federation: float64, Non-Null Count: 61
196. Rwanda: float64, Non-Null Count: 24
197. South Asia: float64, Non-Null Count: 0
198. Saudi Arabia: float64, Non-Null Count: 22
199. Sudan: float64, Non-Null Count: 24
200. Senegal: float64, Non-Null Count: 17
201. Singapore: float64, Non-Null Count: 64
202. Solomon Islands: float64, Non-Null Count: 1
203. Sierra Leone: float64, Non-Null Count: 11
204. El Salvador: float64, Non-Null Count: 47
205. San Marino: float64, Non-Null Count: 0
206. Somalia: float64, Non-Null Count: 0
207. Serbia: float64, Non-Null Count: 29
208. Sub-Saharan Africa (excluding high income): float64, Non-Null Count: 0
209. South Sudan: float64, Non-Null Count: 6
210. Sub-Saharan Africa: float64, Non-Null Count: 0
211. Small states: float64, Non-Null Count: 0
212. Sao Tome and Principe: float64, Non-Null Count: 6
213. Suriname: float64, Non-Null Count: 2
214. Slovak Republic: float64, Non-Null Count: 31
215. Slovenia: float64, Non-Null Count: 33
216. Sweden: float64, Non-Null Count: 64
217. Eswatini: float64, Non-Null Count: 0
218. Seychelles: float64, Non-Null Count: 7
219. Syrian Arab Republic: float64, Non-Null Count: 8
220. Turks and Caicos Islands: float64, Non-Null Count: 0
221. Chad: float64, Non-Null Count: 2
222. Togo: float64, Non-Null Count: 10
223. Thailand: float64, Non-Null Count: 63
224. Tajikistan: float64, Non-Null Count: 20
225. Turkmenistan: float64, Non-Null Count: 8
226. Latin America & Caribbean (IDA & IBRD countries): float64, Non-Null Count: 0
227. Timor-Leste: float64, Non-Null Count: 0
228. Middle East & North Africa (IDA & IBRD countries): float64, Non-Null Count: 0
229. Tonga: float64, Non-Null Count: 2
230. South Asia (IDA & IBRD): float64, Non-Null Count: 0
231. Sub-Saharan Africa (IDA & IBRD countries): float64, Non-Null Count: 0
232. Trinidad and Tobago: float64, Non-Null Count: 15
233. Tunisia: float64, Non-Null Count: 37
234. Turkey: float64, Non-Null Count: 64
235. Tuvalu: float64, Non-Null Count: 0
236. Tanzania: float64, Non-Null Count: 14
237. Uganda: float64, Non-Null Count: 31
238. Ukraine: float64, Non-Null Count: 48
239. Upper middle income: float64, Non-Null Count: 0
240. Uruguay: float64, Non-Null Count: 64
241. United States: float64, Non-Null Count: 64
242. Uzbekistan: float64, Non-Null Count: 16
243. St. Vincent and the Grenadines: float64, Non-Null Count: 0
244. Venezuela, RB: float64, Non-Null Count: 42
245. British Virgin Islands: float64, Non-Null Count: 0
246. Virgin Islands (U.S.): float64, Non-Null Count: 0
247. Vietnam: float64, Non-Null Count: 61
248. Vanuatu: float64, Non-Null Count: 0
249. West Bank and Gaza: float64, Non-Null Count: 10
250. Samoa: float64, Non-Null Count: 4
251. Yemen, Rep.: float64, Non-Null Count: 13
252. South Africa: float64, Non-Null Count: 63
253. Zambia: float64, Non-Null Count: 16
254. Zimbabwe: float64, Non-Null Count: 17

"""

unemployment_rate.dtypes

"""Year: int64
Aruba: float64
Africa Eastern and Southern: float64
Afghanistan: float64
Africa Western and Central: float64
Angola: float64
Albania: float64
Andorra: float64
Arab World: float64
United Arab Emirates: float64
Argentina: float64
Armenia: float64
Antigua and Barbuda: float64
Australia: float64
Austria: float64
Azerbaijan: float64
Burundi: float64
Belgium: float64
Benin: float64
Burkina Faso: float64
Bangladesh: float64
Bulgaria: float64
Bahrain: float64
Bahamas, The: float64
Bosnia and Herzegovina: float64
Belarus: float64
Belize: float64
Bermuda: float64
Bolivia: float64
Brazil: float64
Barbados: float64
Brunei Darussalam: float64
Bhutan: float64
Botswana: float64
Central African Republic: float64
Canada: float64
Central Europe and the Baltics: float64
Switzerland: float64
Channel Islands: float64
Chile: float64
China: float64
Cote d'Ivoire: float64
Cameroon: float64
Congo, Dem. Rep.: float64
Congo, Rep.: float64
Colombia: float64
Comoros: float64
Cabo Verde: float64
Costa Rica: float64
Caribbean small states: float64
Cuba: float64
Curacao: float64
Cayman Islands: float64
Cyprus: float64
Czech Republic: float64
Germany: float64
Djibouti: float64
Dominica: float64
Denmark: float64
Dominican Republic: float64
Algeria: float64
East Asia & Pacific (excluding high income): float64
Early-demographic dividend: float64
East Asia & Pacific: float64
Europe & Central Asia (excluding high income): float64
Europe & Central Asia: float64
Ecuador: float64
Egypt, Arab Rep.: float64
Euro area: float64
Eritrea: float64
Spain: float64
Estonia: float64
Eswatini: float64
Ethiopia: float64
European Union: float64
Fragile and conflict affected situations: float64
Finland: float64
Fiji: float64
France: float64
Faroe Islands: float64
Micronesia, Fed. Sts.: float64
Gabon: float64
United Kingdom: float64
Georgia: float64
Ghana: float64
Gibraltar: float64
Guinea: float64
Gambia, The: float64
Guinea-Bissau: float64
Equatorial Guinea: float64
Greece: float64
Grenada: float64
Greenland: float64
Guatemala: float64
Guam: float64
Guyana: float64
High income: float64
Hong Kong SAR, China: float64
Honduras: float64
Heavily indebted poor countries (HIPC): float64
Croatia: float64
Haiti: float64
Hungary: float64
Indonesia: float64
India: float64
Ireland: float64
Iran, Islamic Rep.: float64
Iraq: float64
Iceland: float64
Israel: float64
Italy: float64
Jamaica: float64
Jordan: float64
Japan: float64
Kazakhstan: float64
Kenya: float64
Kyrgyz Republic: float64
Cambodia: float64
Kiribati: float64
St. Kitts and Nevis: float64
Korea, Rep.: float64
Kuwait: float64
Latin America & Caribbean (excluding high income): float64
Lebanon: float64
Liberia: float64
Libya: float64
St. Lucia: float64
Latin America & Caribbean: float64
Least developed countries: UN classification: float64
Low income: float64
Liechtenstein: float64
Sri Lanka: float64
Lower middle income: float64
Low & middle income: float64
Lesotho: float64
Late-demographic dividend: float64
Lithuania: float64
Luxembourg: float64
Latvia: float64
Macao SAR, China: float64
St. Martin (French part): float64
Morocco: float64
Monaco: float64
Moldova: float64
Madagascar: float64
Maldives: float64
Middle East & North Africa: float64
Mexico: float64
Marshall Islands: float64
Middle income: float64
North Macedonia: float64
Mali: float64
Malta: float64
Myanmar: float64
Middle East & North Africa (excluding high income): float64
Montenegro: float64
Mongolia: float64
Northern Mariana Islands: float64
Mozambique: float64
Mauritania: float64
Mauritius: float64
Malawi: float64
Malaysia: float64
North America: float64
Namibia: float64
New Caledonia: float64
Niger: float64
Nigeria: float64
Nicaragua: float64
Netherlands: float64
Norway: float64
Nepal: float64
Nauru: float64
New Zealand: float64
OECD members: float64
Oman: float64
Other small states: float64
Pakistan: float64
Panama: float64
Peru: float64
Philippines: float64
Palau: float64
Papua New Guinea: float64
Poland: float64
Puerto Rico: float64
Korea, Dem. People's Rep.: float64
Portugal: float64
Paraguay: float64
West Bank and Gaza: float64
Pacific island small states: float64
Post-demographic dividend: float64
French Polynesia: float64
Qatar: float64
Romania: float64
Russian Federation: float64
Rwanda: float64
South Asia: float64
Saudi Arabia: float64
Sudan: float64
Senegal: float64
Singapore: float64
Solomon Islands: float64
Sierra Leone: float64
El Salvador: float64
San Marino: float64
Somalia: float64
Serbia: float64
Sub-Saharan Africa (excluding high income): float64
South Sudan: float64
Sub-Saharan Africa: float64
Small states: float64
Sao Tome and Principe: float64
Suriname: float64
Slovak Republic: float64
Slovenia: float64
Sweden: float64
Eswatini: float64
Seychelles: float64
Syrian Arab Republic: float64
Turks and Caicos Islands: float64
Chad: float64
Togo: float64
Thailand: float64
Tajikistan: float64
Turkmenistan: float64
Latin America & Caribbean (IDA & IBRD countries): float64
Timor-Leste: float64
Middle East & North Africa (IDA & IBRD countries): float64
Tonga: float64
South Asia (IDA & IBRD): float64
Sub-Saharan Africa (IDA & IBRD countries): float64
Trinidad and Tobago: float64
Tunisia: float64
Turkey: float64
Tuvalu: float64
Tanzania: float64
Uganda: float64
Ukraine: float64
Upper middle income: float64
Uruguay: float64
United States: float64
Uzbekistan: float64
St. Vincent and the Grenadines: float64
Venezuela, RB: float64
British Virgin Islands: float64
Virgin Islands (U.S.): float64
Vietnam: float64
Vanuatu: float64
World: float64
Samoa: float64
Kosovo: float64
Yemen, Rep.: float64
South Africa: float64
Zambia: float64
Zimbabwe: float64
"""

unemployment_rate.describe()

"""1.   **The count (number of values)** : USA : 31 ,China : 31 ,  Singapore :  31 , EU: 31  , Japan: 31  , Taiwan : --  , Thailand: 31 , Indonesia:31 , Hong Kong : 31 , South Korea : 31 , Vietnam :31 , India : 31 , Australia : 31 , Philippines : 31 , United Arab Emirates :31  , Saudi Arabia :  31,  Turkey : -- , United Kingdom : 31, Brazil : 31 , Mexico : 31 , Bangladesh : 31 , Switzerland : 31 , Canada :31 , Russia : 31


2.   The mean (average value) :USA : 5.91290322580645 ,China : 4.00709677419354 ,  Singapore :  3.98483870967741 , EU:  9.40935483870967 , Japan: 3.75967741935483  , Taiwan : --  , Thailand: 1.3158064516129 , Indonesia: 5.1958064516129, Hong Kong : 4.07290322580645 , South Korea : 3.37967741935483 , Vietnam :1.92548387096774 , India : 5.64483870967742 , Australia : 6.51967741935484 , Philippines : 3.41129032258064 , United Arab Emirates : 2.3458064516129 , Saudi Arabia :5.78774193548386  ,  Turkey : -- , United Kingdom : 6.33096774193548 , Brazil : 8.92419354838709 , Mexico :4.04096774193548 , Bangladesh : 3.7574193548387 , Switzerland : 3.97677419354838 , Canada : 7.83838709677419, Russia : 7.29645161290322


3. The standard deviation (variability of data) : USA : 1.61626357905796 ,China : 0.794414642145972 ,  Singapore : 0.957802592631494  , EU: 1.41227932903721  , Japan: 0.996956982926771  , Taiwan : --  , Thailand:0.762787756384646  , Indonesia: 1.50544074209415, Hong Kong : 1.62333852199387 , South Korea :1.02069415553327  , Vietnam : 0.45974513743796, India : 0.463061341996514 , Australia :1.82663166122961  , Philippines : 0.504081619948488 , United Arab Emirates : 0.47366496030808 , Saudi Arabia :  0.786281161236951,  Turkey : -- , United Kingdom : 1.87655598520038 , Brazil : 2.31640493609321 , Mexico :  0.999991182756827, Bangladesh : 0.918850614416132 , Switzerland : 0.845389011429153 , Canada : 1.5633065316271, Russia : 2.40244118677523


4. The minimum value : USA : 3.67 ,China :  2.37,  Singapore :  2.18 , EU:  6.69 , Japan: 2.1  , Taiwan : --  , Thailand: 0.25 , Indonesia: 2.62, Hong Kong : 1.8 , South Korea :  2.05, Vietnam : 1, India : 5.27 , Australia : 4.23 , Philippines :2.24  , United Arab Emirates : 1.64 , Saudi Arabia : 4.35 ,  Turkey :--  , United Kingdom :3.74 , Brazil : 6.03 , Mexico : 2.6 , Bangladesh : 2.2 , Switzerland : 1.78 , Canada :5.66 , Russia : 4.5


5. The 25th percentile (first quartile) : USA :4.675  ,China : 3.245 ,  Singapore :3.49   , EU: 8.55999999999999  , Japan: 2.84999999999999  , Taiwan : --  , Thailand: 0.745 , Indonesia:4.32 , Hong Kong : 3.03 , South Korea : 2.84499999999999 , Vietnam : 1.85, India : 5.43 , Australia :  5.215, Philippines : 3.465 , United Arab Emirates :1.90499999999999  , Saudi Arabia :5.44999999999999  ,  Turkey : -- , United Kingdom :4.77999999999999 , Brazil : 7.085 , Mexico : 3.395 , Bangladesh : 2.98 , Switzerland : 3.475 , Canada :6.87 , Russia : 5.45


6. The 50th percentile (median) : USA : 5.53 ,China : 4.44 ,  Singapore : 3.79  , EU:  9.63 , Japan:  3.89 , Taiwan : --  , Thailand: 1.18 , Indonesia:4.68 , Hong Kong : 3.42 , South Korea : 3.32 , Vietnam :1.97 , India : 5.58 , Australia : 5.93 , Philippines :3.61  , United Arab Emirates : 2.25 , Saudi Arabia : 5.67 ,  Turkey :--  , United Kingdom :5.62 , Brazil : 8.52 , Mexico : 3.86 , Bangladesh : 4.12 , Switzerland : 4.12 , Canada : 7.51, Russia : 6.54


7. The 75th percentile (third quartile) : USA :6.85  ,China : 4.575 ,  Singapore :  4.16 , EU: 10.625  , Japan:  4.625 , Taiwan : --  , Thailand:1.5  , Indonesia: 6.235, Hong Kong : 5.175 , South Korea :  3.65, Vietnam :2.155 , India :5.68  , Australia : 7.275 , Philippines :3.7  , United Arab Emirates : 2.71 , Saudi Arabia :6.045  ,  Turkey : -- , United Kingdom : 7.835, Brazil : 9.8 , Mexico : 4.63 , Bangladesh : 4.375 , Switzerland :4.73  , Canada : 8.72 Russia :8.255


8. The maximum value is : USA : 9.63 ,China : 5 ,  Singapore : 5.93  , EU:  11.5 , Japan: 5.39  , Taiwan : --  , Thailand: 3.4 , Indonesia: 8.06, Hong Kong : 7.86 , South Korea : 6.96 , Vietnam :2.87 , India : 8 , Australia :10.87  , Philippines :4.05  , United Arab Emirates : 3.36 , Saudi Arabia :7.45  ,  Turkey : -- , United Kingdom :10.35 , Brazil : 14.4 , Mexico : 7.1 , Bangladesh : 5.41 , Switzerland : 5.32 , Canada : 11.38, Russia :13.26

"""

unemployment_rate.duplicated().sum()

unemployment_rate.isnull().sum()

print(unemployment_rate.columns.tolist())

unemployment_rate.columns = unemployment_rate.columns.str.strip()

unemployment_rate_date = 'Year'
unemployment_rate[unemployment_rate_date] = pd.to_datetime(unemployment_rate[unemployment_rate_date])

unemployment_rate['Year'] = unemployment_rate[unemployment_rate_date].dt.year

unemployment_rate_columns = ['Year', 'Africa Eastern and Southern', 'Afghanistan', 'Africa Western and Central', 'Angola', 'Albania',
              'Arab World', 'United Arab Emirates', 'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan',
              'Burundi', 'Belgium', 'Benin', 'Burkina Faso', 'Bangladesh', 'Bulgaria', 'Bahrain', 'Bahamas, The',
              'Bosnia and Herzegovina', 'Belarus', 'Belize', 'Bolivia', 'Brazil', 'Barbados', 'Brunei Darussalam',
              'Bhutan', 'Botswana', 'Central African Republic', 'Canada', 'Central Europe and the Baltics', 'Switzerland',
              'Channel Islands', 'Chile', 'China', "Cote d'Ivoire", 'Cameroon', 'Congo, Dem. Rep.', 'Congo, Rep.',
              'Colombia', 'Comoros', 'Cabo Verde', 'Costa Rica', 'Caribbean small states', 'Cuba', 'Cyprus',
              'Czech Republic', 'Germany', 'Djibouti', 'Denmark', 'Dominican Republic', 'Algeria',
              'East Asia & Pacific (excluding high income)', 'Early-demographic dividend', 'East Asia & Pacific',
              'Europe & Central Asia (excluding high income)', 'Europe & Central Asia', 'Ecuador', 'Egypt, Arab Rep.',
              'Euro area', 'Eritrea', 'Spain', 'Estonia', 'Ethiopia', 'European Union',
              'Fragile and conflict affected situations', 'Finland', 'Fiji', 'France', 'Gabon', 'United Kingdom',
              'Georgia', 'Ghana', 'Guinea', 'Gambia, The', 'Guinea-Bissau', 'Equatorial Guinea', 'Greece', 'Guatemala',
              'Guam', 'Guyana', 'High income', 'Hong Kong SAR, China', 'Honduras',
              'Heavily indebted poor countries (HIPC)', 'Croatia', 'Haiti', 'Hungary', 'IBRD only', 'IDA & IBRD total',
              'IDA total', 'IDA blend', 'Indonesia', 'IDA only', 'India', 'Ireland', 'Iran, Islamic Rep.', 'Iraq',
              'Iceland', 'Israel', 'Italy', 'Jamaica', 'Jordan', 'Japan', 'Kazakhstan', 'Kenya', 'Kyrgyz Republic',
              'Cambodia', 'Korea, Rep.', 'Kuwait', 'Latin America & Caribbean (excluding high income)', 'Lao PDR',
              'Lebanon', 'Liberia', 'Libya', 'St. Lucia', 'Latin America & Caribbean',
              'Least developed countries: UN classification', 'Low income', 'Sri Lanka', 'Lower middle income',
              'Low & middle income', 'Lesotho', 'Late-demographic dividend', 'Lithuania', 'Luxembourg', 'Latvia',
              'Macao SAR, China', 'Morocco', 'Moldova', 'Madagascar', 'Maldives', 'Middle East & North Africa',
              'Mexico', 'Middle income', 'North Macedonia', 'Mali', 'Malta', 'Myanmar',
              'Middle East & North Africa (excluding high income)', 'Montenegro', 'Mongolia', 'Mozambique',
              'Mauritania', 'Mauritius', 'Malawi', 'Malaysia', 'North America', 'Namibia', 'New Caledonia', 'Niger',
              'Nigeria', 'Nicaragua', 'Netherlands', 'Norway', 'Nepal', 'New Zealand', 'OECD members', 'Oman',
              'Other small states', 'Pakistan', 'Panama', 'Peru', 'Philippines', 'Papua New Guinea', 'Poland',
              'Pre-demographic dividend', 'Puerto Rico', "Korea, Dem. People's Rep.", 'Portugal', 'Paraguay',
              'West Bank and Gaza', 'Pacific island small states', 'Post-demographic dividend', 'French Polynesia',
              'Qatar', 'Romania', 'Russian Federation', 'Rwanda', 'South Asia', 'Saudi Arabia', 'Sudan', 'Senegal',
              'Singapore', 'Solomon Islands', 'Sierra Leone', 'El Salvador', 'Somalia', 'Serbia',
              'Sub-Saharan Africa (excluding high income)', 'South Sudan', 'Sub-Saharan Africa', 'Small states',
              'Sao Tome and Principe', 'Suriname', 'Slovak Republic', 'Slovenia', 'Sweden', 'Eswatini', 'Syrian Arab Republic',
              'Chad', 'East Asia & Pacific (IDA & IBRD countries)', 'Europe & Central Asia (IDA & IBRD countries)',
              'Togo', 'Thailand', 'Tajikistan', 'Turkmenistan', 'Latin America & the Caribbean (IDA & IBRD countries)',
              'Timor-Leste', 'Middle East & North Africa (IDA & IBRD countries)', 'Tonga',
              'South Asia (IDA & IBRD)', 'Sub-Saharan Africa (IDA & IBRD countries)', 'Trinidad and Tobago', 'Tunisia',
              'Turkiye', 'Tanzania', 'Uganda', 'Ukraine', 'Upper middle income', 'Uruguay', 'United States',
              'Uzbekistan', 'St. Vincent and the Grenadines', 'Venezuela, RB', 'Virgin Islands (U.S.)', 'Vietnam',
              'Vanuatu', 'World', 'Samoa', 'Yemen, Rep.', 'South Africa', 'Zambia', 'Zimbabwe']

yearly_avg = unemployment_rate.groupby('Year')[unemployment_rate_columns].mean()

if 'Year' in yearly_avg.columns:
    yearly_avg = yearly_avg.drop(columns=['Year'])

df_yearly_avg = yearly_avg.reset_index()

yearly_avg_unemployment_rate = 'Yearly_Avg_unemployment_rate.csv'
df_yearly_avg.to_csv(yearly_avg_unemployment_rate, index=False)

print(f"Yearly average unemployment rate saved to {yearly_avg_unemployment_rate}")

yearly_avg_unemployment_rate = yearly_avg.reset_index()

print(type(yearly_avg_unemployment_rate))
print(yearly_avg_unemployment_rate.head(5))

"""## **E.) Global Commodity Price**"""

commodity_price = pd.read_csv("/content/drive/MyDrive/Classroom/BMCS2114MachineLearning/Assignment/DataSets /Commodity_Price.csv",skiprows = 0)

commodity_price.head(5)

commodity_price.tail(5)

commodity_price.shape

commodity_price.columns

"""The "commodity_price" DataFrame consists of the following columns: 'Date', and 'PALLFNFINDEXQ'."""

commodity_price.info()

"""The "interest_rate" DataFrame has 86 entries and 2 columns.

- **Date:** This column contains object data type and has 86 non-null entries.
- **PALLFNFINDEXQ:** This column contains object data type and has 86 non-null entries.
"""

commodity_price.dtypes

"""- **DATE:**   This column contains object data type.
- **PALLFNINDEXQ:**    These columns contain float64 data type.
"""

commodity_price.describe()

"""- The count (number of values) : 86.

- The mean (average value) : 134.340297.

- The standard deviation (variability of data) : 30.039998.

- The minimum value : 63.112509.

- The 25th percentile (first quartile) : 107.505754.

- The 50th percentile (median) : 126.865463.

- The 75th percentile (third quartile) : 166.446108.

- The maximum value is : 230.461208.
"""

commodity_price.duplicated().sum()

commodity_price.isnull().sum()

commodity_price_date = 'DATE'
commodity_price[commodity_price_date] = pd.to_datetime(commodity_price[commodity_price_date])

commodity_price['Year'] = commodity_price[commodity_price_date].dt.year

commodity_price_columns = ["PALLFNFINDEXQ"]

yearly_avg = commodity_price.groupby('Year')[commodity_price_columns].mean()

df_yearly_avg = yearly_avg.reset_index()

yearly_avg_commodity_price = 'Yearly_Avg_Commodity_Price.csv'
df_yearly_avg.to_csv(yearly_avg_commodity_price, index=False)

print(f"Yearly average commodity price saved to {yearly_avg_commodity_price}")

yearly_avg_exchange_rate = yearly_avg.reset_index()


print(type(yearly_avg_exchange_rate))
print(yearly_avg_exchange_rate.head(5))

"""## **F.) Inflation Rate**"""

inflation_rate = pd.read_csv("/content/drive/MyDrive/Classroom/BMCS2114MachineLearning/Assignment/DataSets/Inflation_Rate.csv",skiprows = 0)

inflation_rate.head(5)

inflation_rate.tail(5)

inflation_rate.shape

inflation_rate.columns

inflation_rate.info()

"""- **date:**   This column contains object data type and 63 non-null values.
- **Saudi_Arabia_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **India_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **US_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **Vietnam_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **South_Korea_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **Thailand_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **Switzerland_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **UK_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **Turkey_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **UAE_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **Indonesia_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **Japan_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **Malaysia_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **Philippines_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **Mexico_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **Bangladesh_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **Australia_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **Singapore_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **Hong_Kong_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **Russia_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **China_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
- **Brazil_Inflation_Rate:**   This column contains float64 data type and 63 non-null values.
- **Canada_Inflation_Rate:**    These columns contain float64 data type and 63 non-null values.
"""

inflation_rate.dtypes

"""- **date:**   This column contains object data type.
- **Saudi_Arabia_Inflation_Rate:**   This column contains float64 data type.
- **India_Inflation_Rate:**    These columns contain float64 data type.
- **US_Inflation_Rate:**    These columns contain float64 data type.
- **Vietnam_Inflation_Rate:**   This column contains float64 data type.
- **South_Korea_Inflation_Rate:**    These columns contain float64 data type.
- **Thailand_Inflation_Rate:**   This column contains float64 data type.
- **Switzerland_Inflation_Rate:**    These columns contain float64 data type.
- **UK_Inflation_Rate:**   This column contains float64 data type.
- **Turkey_Inflation_Rate:**    These columns contain float64 data type.
- **UAE_Inflation_Rate:**   This column contains float64 data type.
- **Indonesia_Inflation_Rate:**    These columns contain float64 data type.
- **Japan_Inflation_Rate:**   This column contains float64 data type.
- **Malaysia_Inflation_Rate:**    These columns contain float64 data type.
- **Philippines_Inflation_Rate:**   This column contains float64 data type.
- **Mexico_Inflation_Rate:**    These columns contain float64 data type.
- **Bangladesh_Inflation_Rate:**   This column contains float64 data type.
- **Australia_Inflation_Rate:**    These columns contain float64 data type.
- **Singapore_Inflation_Rate:**   This column contains float64 data type.
- **Hong_Kong_Inflation_Rate:**    These columns contain float64 data type.
- **Russia_Inflation_Rate:**   This column contains float64 data type.
- **China_Inflation_Rate:**    These columns contain float64 data type.
- **Brazil_Inflation_Rate:**   This column contains float64 data type.
- **Canada_Inflation_Rate:**    These columns contain float64 data type.
"""

inflation_rate.describe()

"""1.   **The count (number of values)** : All inlflation rate  pairs have 63 data points.


2.   The mean (average value) : USA : 3.76483968253968 ,China : 2.72752063492063 ,  Singapore :  2.48790634920635  , EU: --  , Japan: 2.9283365079365  , Taiwan : --  , Thailand: 4.07733809523809 , Indonesia: 42.5951539682539, Hong Kong : -- , South Korea : 7.64770317460317 , Vietnam : 2.47381111111111, India : 7.36513492063492 , Australia :  4.68909841269841, Philippines : 8.36182698412698 , United Arab Emirates : -- , Saudi Arabia : 3.20736825396825 ,  Turkey :32.1019698412698  , United Kingdom :-- , Brazil : 186.843604761904 , Mexico : 18.686119047619 , Bangladesh :3.58822857142857  , Switzerland : 2.37371587301587 , Canada :3.7411746031746 , Russia : 28.153819047619


3. The standard deviation (variability of data) : USA : 2.78463036080251 ,China :  5.18710819237521,  Singapore : 3.96954388392553 , EU: --  , Japan: 4.05886270859141  , Taiwan : --  , Thailand: 4.57589480367848 , Indonesia: 148.199519235709, Hong Kong : -- , South Korea : 7.17438095998686 , Vietnam :4.45095789922585 , India : 4.86968123289925 , Australia : 3.73797242035304 , Philippines : 8.17511749717685 , United Arab Emirates : -- , Saudi Arabia : 6.80109912293179 ,  Turkey : 28.7945232964514 , United Kingdom : --, Brazil : 542.640121078099 , Mexico : 27.6985217248948 , Bangladesh : 3.53923367336128 , Switzerland : 2.36876884819848 , Canada :2.98532605799942 , Russia : 117.871616203299


4. The minimum value : USA : -0.3555 ,China :-1.4015  ,  Singapore : -1.8419  , EU:  -- , Japan: -1.3528  , Taiwan : --  , Thailand: -0.9004 , Indonesia:1.5601 , Hong Kong : -- , South Korea : 0.383 , Vietnam :-1.7103 , India : -7.6339 , Australia : -0.3195 , Philippines : 0.6742 , United Arab Emirates :--  , Saudi Arabia :-3.2033  ,  Turkey : 1.1196 , United Kingdom : --, Brazil : 0 , Mexico : 0.5941 , Bangladesh : 0 , Switzerland : -1.1439 , Canada :0.1656 , Russia : 0


5. The 25th percentile (first quartile) : USA : 1.8551 ,China :0  ,  Singapore : 0.47175  , EU: --  , Japan: 0.0931  , Taiwan : --  , Thailand: 1.14715 , Indonesia: 6.14509999999999, Hong Kong : -- , South Korea : 2.6423 , Vietnam : 0, India : 4.12785 , Australia : 2.1286 , Philippines : 3.6938 , United Arab Emirates : -- , Saudi Arabia : 0.0286 ,  Turkey :8.5192  , United Kingdom : --, Brazil :0  , Mexico : 3.97745 , Bangladesh :0  , Switzerland :0.7103  , Canada :1.6815 , Russia : 0


6. The 50th percentile (median) : USA : 3.0151 ,China :0.3478  ,  Singapore :  1.7205 , EU: --  , Japan:  1.7603 , Taiwan : --  , Thailand: 3.3122 , Indonesia:9.4191 , Hong Kong : -- , South Korea : 4.801 , Vietnam :0 , India : 6.6657 , Australia : 3.2934 , Philippines : 5.8212 , United Arab Emirates : -- , Saudi Arabia : 1.2221 ,  Turkey : 19.0114 , United Kingdom :-- , Brazil : 5.4035 , Mexico : 5.6892 , Bangladesh :3.3326  , Switzerland : 1.7155 , Canada : 2.5251, Russia : 0


7. The 75th percentile (third quartile) : USA : 4.4992 ,China : 2.84285 ,  Singapore :  2.9619 , EU:  -- , Japan: 4.87785  , Taiwan : --  , Thailand: 5.412 , Indonesia: 15.85635, Hong Kong :  --, South Korea : 10.8271 , Vietnam :3.52995 , India : 9.74844999999999 , Australia :6.9753  , Philippines : 9.9641 , United Arab Emirates : -- , Saudi Arabia : 3.51419999999999 ,  Turkey : 57.60965 , United Kingdom : --, Brazil :15.2363  , Mexico : 20.31675 , Bangladesh :6.2059  , Switzerland :3.5281  , Canada :4.67105 , Russia : 10.2786499999999


8. The maximum value is : USA : 13.5492 ,China : 24.257 ,  Singapore :  22.3684 , EU:  -- , Japan: 23.2222  , Taiwan : --  , Thailand: 24.3136 , Indonesia:1136.2541 , Hong Kong : -- , South Korea : 29.4628 , Vietnam : 23.1154, India :28.5987  , Australia : 15.4167 , Philippines : 50.339 , United Arab Emirates :--  , Saudi Arabia : 34.5761 ,  Turkey : 105.215 , United Kingdom : --, Brazil : 2947.7328 , Mexico : 131.8274 , Bangladesh :11.3952  , Switzerland :9.7674 , Canada : 12.4716, Russia : 874.2457

"""

inflation_rate.duplicated().sum()

inflation_rate.isnull().sum()

inflation_rate.columns

inflation_rate.columns = inflation_rate.columns.str.strip()

inflation_rate_date = 'date'
inflation_rate[inflation_rate_date] = pd.to_datetime(inflation_rate[inflation_rate_date])

inflation_rate['Year'] = inflation_rate[inflation_rate_date].dt.year

inflation_rate_columns = [
    "Saudi_Arabia_Inflation_Rate", "India_Inflation_Rate",
    "US_Inflation_Rate", "Vietnam_Inflation_Rate",
    "South_Korea_Inflation_Rate", "Thailand_Inflation_Rate",
    "Switzerland_Inflation_Rate", "UK_Inflation_Rate",
    "Turkey_Inflation_Rate", "UAE_Inflation_Rate",
    "Indonesia_Inflation_Rate", "Japan_Inflation_Rate",
    "Malaysia_Inflation_Rate", "Philippines_Inflation_Rate",
    "Mexico_Inflation_Rate", "Bangladesh_Inflation_Rate",
    "Australia_Inflation_Rate", "Singapore_Inflation_Rate",
    "Hong_Kong_Inflation_Rate", "Russia_Inflation_Rate",
    "China_Inflation_Rate", "Brazil_Inflation_Rate",
    "Canada_Inflation_Rate"
]

yearly_avg = inflation_rate.groupby('Year')[inflation_rate_columns].mean()

df_yearly_avg = yearly_avg.reset_index()

yearly_avg_inflation_rate = 'Yearly_Avg_Inflation_Rate.csv'
df_yearly_avg.to_csv(yearly_avg_inflation_rate, index=False)

print(f"Yearly average inflation rate saved to {yearly_avg_inflation_rate}")

yearly_avg_inflation_rate = yearly_avg.reset_index()

print(type(yearly_avg_inflation_rate))
print(yearly_avg_inflation_rate.head(5))

"""# **4.0 EDA**

# **4.1 Interest Rate**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

interest_rate = pd.read_csv("data/Interest_Rate.csv")
unemployed_rate = pd.read_csv("data/Unemployment_Rate.csv")
commodity_price = pd.read_csv("data/Commodity_Price.csv")
inflation_rate = pd.read_csv("data/Inflation_Rate.csv")
exchange_rate = pd.read_csv("data/Exchange_Rate.csv")
gpd =pd.read_csv("data/GDP.csv")

interest_rate.isnull().sum()

interest_rate_cleaned = interest_rate.dropna(axis=1, how='all')

interest_rate_cleaned.fillna(0, inplace=True)

interest_rate_cleaned.head(50)

interest_rate_cleaned.to_csv("/content/drive/MyDrive/Classroom/BMCS2114MachineLearning/Assignment/DataSets/Interest_Rate_cleaned.csv", index=False)

print(interest_rate_cleaned.columns.to_list())

actual_columns = ['Year', 'Aruba', 'Afghanistan', 'Angola', 'Albania', 'Argentina', 'Armenia', 'Antigua and Barbuda', 'Australia', 'Azerbaijan', 'Burundi', 'Benin', 'Burkina Faso', 'Bangladesh', 'Bulgaria', 'Bahrain', 'Bahamas, The', 'Bosnia and Herzegovina', 'Belarus', 'Belize', 'Bolivia', 'Brazil', 'Barbados', 'Brunei Darussalam', 'Bhutan', 'Botswana', 'Canada', 'Switzerland', 'Chile', 'China', "Cote d'Ivoire", 'Congo, Dem. Rep.', 'Colombia', 'Comoros', 'Cabo Verde', 'Costa Rica', 'Czechia', 'Dominica', 'Dominican Republic', 'Algeria', 'Egypt, Arab Rep.', 'Ethiopia', 'Fiji', 'Micronesia, Fed. Sts.', 'United Kingdom', 'Georgia', 'Guinea', 'Gambia, The', 'Guinea-Bissau', 'Grenada', 'Guatemala', 'Guyana', 'Hong Kong SAR, China', 'Honduras', 'Croatia', 'Haiti', 'Hungary', 'Indonesia', 'India', 'Iran, Islamic Rep.', 'Iraq', 'Iceland', 'Israel', 'Italy', 'Jamaica', 'Jordan', 'Japan', 'Kenya', 'Kyrgyz Republic', 'St. Kitts and Nevis', 'Korea, Rep.', 'Kuwait', 'Lao PDR', 'Lebanon', 'Liberia', 'Libya', 'St. Lucia', 'Sri Lanka', 'Lesotho', 'Macao SAR, China', 'Moldova', 'Madagascar', 'Maldives', 'Mexico', 'North Macedonia', 'Mali', 'Malta', 'Myanmar', 'Montenegro', 'Mongolia', 'Mozambique', 'Mauritania', 'Mauritius', 'Malawi', 'Malaysia', 'Namibia', 'Niger', 'Nigeria', 'Nicaragua', 'Netherlands', 'Norway', 'New Zealand', 'Oman', 'Pakistan', 'Panama', 'Peru', 'Philippines', 'Papua New Guinea', 'Paraguay', 'West Bank and Gaza', 'Qatar', 'Romania', 'Russian Federation', 'Rwanda', 'Senegal', 'Singapore', 'Solomon Islands', 'Sierra Leone', 'San Marino', 'Somalia', 'Serbia', 'South Sudan', 'Sao Tome and Principe', 'Suriname', 'Sweden', 'Eswatini', 'Seychelles', 'Togo', 'Thailand', 'Tajikistan', 'Timor-Leste', 'Tonga', 'Trinidad and Tobago', 'Tanzania', 'Uganda', 'Ukraine', 'Uruguay', 'United States', 'Uzbekistan', 'St. Vincent and the Grenadines', 'Venezuela, RB', 'Viet Nam', 'Vanuatu', 'Samoa', 'Kosovo', 'Yemen, Rep.', 'South Africa', 'Zambia', 'Zimbabwe']

new_interest_rate = [
    'Year', 'Australia', 'United Arab Emirates', 'Bangladesh', 'Brazil', 'Canada',
    'Euro area', 'Switzerland', 'China', 'United Kingdom', 'Hong Kong SAR, China',
    'Indonesia', 'India', 'Japan', 'Korea, Rep.', 'Mexico', 'Malaysia',
    'Philippines', 'Russian Federation', 'Saudi Arabia', 'Singapore',
    'Thailand', 'Turkiye', 'United States'
]

missing_columns = [col for col in actual_columns if col not in new_interest_rate]

print("Missing columns:", missing_columns)

print(interest_rate_cleaned.columns)

new_interest_rate = [
    'Year', 'Australia', 'Bangladesh', 'Brazil', 'Canada', 'Switzerland',
    'China', 'United Kingdom', 'Hong Kong SAR, China','Indonesia', 'India',
    'Japan', 'Korea, Rep.', 'Mexico', 'Malaysia','Philippines', 'Russian Federation',
    'Singapore','Thailand', 'United States']

interest_rate_cleaned.columns = interest_rate_cleaned.columns.str.strip()

interest_rate_selected = interest_rate_cleaned[new_interest_rate]

interest_rate_selected.to_csv("data/Interest_Rate.csv", index=False)

print(interest_rate_selected.head(20))

"""Turkiye, United Arab Emirates, Euro area and Saudi Arabia is not found in dataFrame interest_rate_cleaned becasue they have no data throughout all the rows.

## **Outliers**
"""

import numpy as np
import pandas as pd
from scipy.stats import zscore
import plotly.graph_objects as go

z_scores = interest_rate_selected.apply(zscore, axis=0)

threshold = 3

outliers = (np.abs(z_scores) > threshold).sum(axis=0)

years = interest_rate_selected.index
countries = interest_rate_selected.columns

Z = np.zeros((len(countries), len(years)))

for i, country in enumerate(countries):
    Z[i, :] = (np.abs(z_scores[country]) > threshold).astype(int).values

X, Y = np.meshgrid(range(len(years)), range(len(countries)))

X_flat = X.flatten()
Y_flat = Y.flatten()
Z_flat = Z.flatten()

fig = go.Figure(data=[go.Scatter3d(
    x=X_flat,
    y=Y_flat,
    z=Z_flat,
    mode='markers',
    marker=dict(
        size=8,
        color=Z_flat,
        colorscale='Viridis',
        colorbar=dict(title='Count of Outliers')
    )
)])

fig.update_layout(
    scene=dict(
        xaxis_title='Year',
        yaxis_title='Country',
        zaxis_title='Count of Outliers',
        xaxis=dict(tickvals=list(range(0, len(years), 5)), ticktext=years[::5]),
        yaxis=dict(tickvals=list(range(0, len(countries), 3)), ticktext=countries[::3])
    ),
    title='Interactive 3D Chart of Outliers in Interest Rates',
    autosize=True
)

fig.show()

"""## **Min, Average and Max of Interest Rate for All Countries**"""

import matplotlib.pyplot as plt

if 'Year' in interest_rate_selected.columns:
    interest_rate_selected.set_index('Year', inplace=True)

average_rates = interest_rate_selected.mean(axis=1)
min_rates = interest_rate_selected.min(axis=1)
max_rates = interest_rate_selected.max(axis=1)

print("Average Rates:\n", average_rates.head())
print("Minimum Rates:\n", min_rates.head())
print("Maximum Rates:\n", max_rates.head())

plt.figure(figsize=(14, 7))

plt.plot(average_rates.index, average_rates, label='Average Interest Rate', color='blue', linestyle='-', marker='o')
plt.plot(min_rates.index, min_rates, label='Minimum Interest Rate', color='red', linestyle='--', marker='x')
plt.plot(max_rates.index, max_rates, label='Maximum Interest Rate', color='green', linestyle='-.', marker='s')

plt.fill_between(average_rates.index, min_rates, max_rates, color='grey', alpha=0.2)

plt.title("Aggregated Interest Rate Trends Over Time")
plt.xlabel("Year")
plt.ylabel("Interest Rate (%)")
plt.legend()
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""## **Countries that entitled to low interest rate.**"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

if 'Year' in interest_rate_selected.columns:
    interest_rate_selected.set_index('Year', inplace=True)
yearly_average = interest_rate_selected.mean(axis=1)

# Convert yearly_average to a NumPy array
yearly_average_array = yearly_average.values
below_average_counts = (interest_rate_selected.values < yearly_average_array[:, None]).sum(axis=1)
overall_average_interest_rate = interest_rate_selected.values.mean()

fig = plt.figure(figsize=(14, 10))
ax = fig.add_subplot(111, projection='3d')
X = years
Y = below_average_counts
Z = yearly_average_array
scatter = ax.scatter(X, Y, Z, c=Z, cmap='viridis', marker='o', s=100)
cbar = fig.colorbar(scatter, ax=ax, shrink=0.5, aspect=5)
cbar.set_label('Yearly Average Interest Rate', fontsize=12)
ax.set_title('3D Trend of Countries Below Average Interest Rates and Yearly Average Rates', fontsize=16, weight='bold')
ax.set_xlabel('Year', fontsize=12)
ax.set_ylabel('Countries Below Average', fontsize=12)
ax.set_zlabel('Yearly Average Interest Rate', fontsize=12)
ax.view_init(elev=30, azim=135)
ax.grid(True)
plt.show()

"""## **Countries that entitled to high interest rate.**"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

if 'Year' in interest_rate_selected.columns:
    interest_rate_selected.set_index('Year', inplace=True)

yearly_average = interest_rate_selected.mean(axis=1)

# Convert yearly_average to a NumPy array
yearly_average_array = yearly_average.values
above_average_counts = (interest_rate_selected.values > yearly_average_array[:, None]).sum(axis=1)
overall_average_interest_rate = interest_rate_selected.values.mean()

fig = plt.figure(figsize=(14, 10))
ax = fig.add_subplot(111, projection='3d')
X = interest_rate_selected.index
Y = above_average_counts
Z = yearly_average_array
scatter = ax.scatter(X, Y, Z, c=Z, cmap='plasma', marker='o', s=100)
cbar = fig.colorbar(scatter, ax=ax, shrink=0.5, aspect=5)
cbar.set_label('Yearly Average Interest Rate', fontsize=12)
ax.set_title('3D Trend of Countries Above Average Interest Rates and Yearly Average Rates', fontsize=16, weight='bold')
ax.set_xlabel('Year', fontsize=12)
ax.set_ylabel('Countries Above Average', fontsize=12)
ax.set_zlabel('Yearly Average Interest Rate', fontsize=12)
ax.view_init(elev=30, azim=135)
ax.grid(True)
plt.show()

"""## **Difference average interest rate**

**Deleloped Countries :
Australia
Canada
Switzerland
United Kingdom
Hong Kong SAR, China
Japan
Singapore
Korea, Rep. (South Korea)
United State**


**Developing Countries:
Bangladesh
Brazil
China
Indonesia
India
Malaysia
Philippines
Russian Federation
Thailand
Mexico**
"""

import pandas as pd
import matplotlib.pyplot as plt

developed_countries = [
    'Australia', 'Canada', 'Switzerland', 'United Kingdom', 'Hong Kong SAR, China',
    'Japan', 'Singapore', 'Korea, Rep.', 'United States'
]

developing_countries = [
    'Bangladesh', 'Brazil', 'China', 'Indonesia', 'India', 'Malaysia', 'Philippines',
    'Russian Federation', 'Thailand', 'Mexico'
]

print("Available columns:", interest_rate_selected.columns)

missing_developed = [country for country in developed_countries if country not in interest_rate_selected.columns]
missing_developing = [country for country in developing_countries if country not in interest_rate_selected.columns]

if missing_developed or missing_developing:
    print("Missing countries in developed list:", missing_developed)
    print("Missing countries in developing list:", missing_developing)
else:
    developed_rates = interest_rate_selected[developed_countries].mean(axis=1)
    developing_rates = interest_rate_selected[developing_countries].mean(axis=1)
    average_developed = developed_rates.mean()
    average_developing = developing_rates.mean()
    difference = average_developed - average_developing

    print(f"Average Interest Rate for Developed Countries: {average_developed:.2f}%")
    print(f"Average Interest Rate for Developing Countries: {average_developing:.2f}%")
    print(f"Difference in Average Interest Rates: {difference:.2f}%")

    plt.figure(figsize=(10, 6))
    bars = plt.bar(['Developed Countries', 'Developing Countries'], [average_developed, average_developing], color=['blue', 'orange'])

    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2, yval + 0.05, f'{yval:.2f}%', ha='center', va='bottom')

    plt.ylabel('Average Interest Rate (%)')
    plt.title('Comparison of Average Interest Rates')
    plt.grid(axis='y', linestyle='--')
    plt.show()

"""#**4.2 Unemployed Rate**

## **Outliers**
"""

from scipy import stats

z_scores = stats.zscore(unemployed_rate_melted['Unemployment Rate'].dropna())

unemployed_rate_melted['z_score'] = z_scores

anomalies = unemployed_rate_melted[unemployed_rate_melted['z_score'].abs() > 3]

print(anomalies)

"""## **Countries with the highest unemployment**"""

import pandas as pd

unemployed_rate_reset = unemployed_rate.reset_index()

# Melt the DataFrame
unemployed_rate_melted = unemployed_rate_reset.melt(id_vars=["Year"],
                                                    var_name="Country",
                                                    value_name="Unemployment Rate")

max_unemployment = unemployed_rate_melted.loc[unemployed_rate_melted['Unemployment Rate'].idxmax()]
country_with_highest_rate = max_unemployment['Country']
highest_rate = max_unemployment['Unemployment Rate']

print(f"The country with the highest unemployment rate is {country_with_highest_rate} with a rate of {highest_rate}%.")

import pandas as pd

unemployed_rate_reset = unemployed_rate.reset_index()

unemployed_rate_melted = unemployed_rate_reset.melt(id_vars=["Year"],
                                                    var_name="Country",
                                                    value_name="Unemployment Rate")

average_unemployment = unemployed_rate_melted.groupby("Country")["Unemployment Rate"].mean()

top_5_countries = average_unemployment.nlargest(5)

print("Top 5 countries with the highest average unemployment rate:")
print(top_5_countries)

plt.figure(figsize=(10, 6))
plt.plot(unemployed_rate['Year'], unemployed_rate['Malaysia'], marker='o', linestyle='-', color='b')

plt.title('Unemployment Rate in Malaysia Over Time')
plt.xlabel('Year from 1991-2021')
plt.ylabel('Unemployment Rate (%)')

plt.xticks(rotation=45)

plt.grid(True)
plt.show()

"""## **Average percentage distribution of the unemployment rate accross countries.**"""

import matplotlib.pyplot as plt

selected_countries = [
    'Malaysia', 'United States', 'China', 'Singapore', 'European Union', 'Japan', 'Taiwan', 'Thailand',
    'Indonesia', 'Hong Kong SAR, China', 'Korea, Rep.', 'Vietnam', 'India',
    'Australia', 'Philippines', 'United Arab Emirates', 'Saudi Arabia',
    'United Kingdom', 'Brazil', 'Mexico', 'Bangladesh', 'Switzerland',
    'Canada', 'Russia'
]

filtered_data = unemployed_rate_melted[unemployed_rate_melted['Country'].isin(selected_countries)]

average_rates = filtered_data.groupby('Country')['Unemployment Rate'].mean()

plt.figure(figsize=(10, 6))
average_rates.plot(kind='bar', color='skyblue', edgecolor='k')

plt.title('Average Unemployment Rate for Selected Countries')
plt.xlabel('Country')
plt.ylabel('Average Unemployment Rate (%)')
plt.show()

"""## **Unemployment rate box plot distrubution accross major countries.**"""

import matplotlib.pyplot as plt
import seaborn as sns

selected_countries = [
    'Malaysia', 'United States', 'China', 'Singapore', 'European Union', 'Japan', 'Taiwan', 'Thailand',
    'Indonesia', 'Hong Kong SAR, China', 'Korea, Rep.', 'Vietnam', 'India',
    'Australia', 'Philippines', 'United Arab Emirates', 'Saudi Arabia',
    'United Kingdom', 'Brazil', 'Mexico', 'Bangladesh', 'Switzerland',
    'Canada', 'Russia'
]

selected_data = unemployed_rate_melted[unemployed_rate_melted['Country'].isin(selected_countries)]

plt.figure(figsize=(18, 9))
sns.boxplot(x='Country', y='Unemployment Rate', data=selected_data)
plt.xticks(rotation=90)
plt.title('Unemployment Rate Distribution in Selected Countries')
plt.show()

"""## **Regional analysis**"""

import plotly.express as px

fig = px.choropleth(unemployed_rate_melted,
                    locations="Country",
                    locationmode='country names',
                    color="Unemployment Rate",
                    animation_frame="Year",
                    color_continuous_scale="Viridis",
                    title="Unemployment Rate by Country Over Time")

fig.update_layout(
    geo=dict(
        showframe=False,
        showcoastlines=False,
        projection_type='equirectangular'
    ),
    coloraxis_colorbar=dict(
        title="Unemployment Rate (%)"
    )
)
fig.show()

"""# **4.3 Gross Domestic Product (GDP)**

## **Trends for Overall Global Domestic Product (GDP)**
"""

import matplotlib.pyplot as plt

gdp.set_index('Year').sum(axis=1).plot(figsize=(12, 6))
plt.title('Total Global GDP Trend')
plt.xlabel('Year')
plt.ylabel('Total GDP')
plt.grid(True)
plt.show()

"""## **Top 5 Highest Countries Based On Overall Average of GDP**"""

# Calculate average GDP for each country
average_gdp = gdp.drop(columns=['Year']).mean().sort_values(ascending=False)


top_5_countries = average_gdp_filtered.head(5)
top_5_countries.plot(kind='bar', figsize=(10, 6))
plt.title('Top 5 Countries by Average GDP')
plt.ylabel('Average GDP')
plt.grid(True)
plt.show()

"""## **Trends of GDP for Selected Countries**

Selected countries:


*   USA
*   China
*   India
*   Brazil
*   Japan
"""

# Calculate GDP growth rate
gdp_growth = gdp_filtered.set_index('year').pct_change().dropna()

selected_countries = ['USA', 'China', 'India', 'Brazil', 'Japan']
gdp_growth[selected_countries].plot(figsize=(14, 8))
plt.title('GDP Growth Rate Over Time')
plt.xlabel('Year')
plt.ylabel('GDP Growth Rate')
plt.grid(True)
plt.show()

"""## **Selected Countries GDP Contribution to World GDP**"""

# Calculate annual contribution of each country to world GDP
gdp_contribution = gdp_filtered.set_index('year').div(gdp_filtered.set_index('year').sum(axis=1), axis=0) * 100

selected_countries = ['USA', 'China', 'India', 'Brazil', 'Japan']
gdp_contribution[selected_countries].plot(figsize=(14, 8))
plt.title('GDP Contribution to World GDP Over Time')
plt.xlabel('Year')
plt.ylabel('Percentage Contribution')
plt.grid(True)
plt.show()

"""## **Yearly GDP Trend for Selected Countries**"""

# Plot GDP trends for selected countries
countries_of_interest = ['USA', 'China', 'India']
plt.figure(figsize=(14, 8))
for country in countries_of_interest:
    plt.plot(gdp_filtered['year'], gdp_filtered[country], label=country)

plt.xlabel('Year')
plt.ylabel('GDP')
plt.title('Yearly GDP Trends for Selected Countries')
plt.legend()
plt.grid(True)
plt.show()

"""## **GDP Growth Comparison Between Major Economies**

Major Economies Selected:
*   USA
*   China
*   India
"""

gdp_growth[['USA', 'China', 'India']].plot(figsize=(14, 8))
plt.title('GDP Growth Comparison of Major Economies')
plt.xlabel('Year')
plt.ylabel('GDP Growth Rate')
plt.grid(True)
plt.show()

"""## **Long-Term GDP Trends**

Selected coutries for long term trends analysis:
*   USA
*   China
*   Japan
"""

long_term_countries = ['USA', 'China', 'Japan']
plt.figure(figsize=(14, 8))
for country in long_term_countries:
    plt.plot(gdp_filtered['year'], gdp_filtered[country], label=country)

plt.xlabel('Year')
plt.ylabel('GDP')
plt.title('Long-Term GDP Trends for Selected Countries')
plt.legend()
plt.grid(True)
plt.show()

"""# **4.4 Commodity Price**

## **Outliers**
"""

plt.figure(figsize=(10, 6))
sns.boxplot(data=commodity_price['PALLFNFINDEXQ'])
plt.title('Boxplot for Outlier Detection')
plt.xticks(rotation=90)
plt.show()

"""## **Rolling mean and standard deviation of commodity prices**"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

commodity_column = 'PALLFNFINDEXQ'

if 'Date' in commodity_price.columns:
    commodity_price['Date'] = pd.to_datetime(commodity_price['Date'])
    commodity_price.set_index('Date', inplace=True)

rolling_mean = commodity_price[commodity_column].rolling(window=12).mean()
rolling_std = commodity_price[commodity_column].rolling(window=12).std()

# Create a subset of data for visualization (e.g., last 24 months for better clarity)
subset = commodity_price[-24:]
rolling_mean_subset = rolling_mean[-24:]
rolling_std_subset = rolling_std[-24:]

bar_width = 0.2
index = np.arange(len(subset))
plt.figure(figsize=(14, 8))

plt.bar(index, subset[commodity_column], bar_width, color='blue', label='Original')
plt.bar(index + bar_width, rolling_mean_subset, bar_width, color='red', label='Rolling Mean')
plt.bar(index + 2 * bar_width, rolling_std_subset, bar_width, color='black', label='Rolling Std')

plt.xlabel('Date')
plt.ylabel('Price Index')
plt.title('Comparison of Original, Rolling Mean, and Rolling Std over Time')
plt.xticks(index + bar_width, subset.index.strftime('%Y-%m'), rotation=45)
plt.legend()
plt.tight_layout()
plt.grid(True)
plt.show()

"""## **Heatmap of Monthly Average Prices**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

monthly_avg = commodity_price.pivot_table(
    values='PALLFNFINDEXQ',
    index=commodity_price.index.year,
    columns=commodity_price.index.month,
    aggfunc='mean'
)

plt.figure(figsize=(12, 8))
sns.heatmap(monthly_avg, cmap='YlGnBu', annot=True, fmt=".1f")
plt.title('Heatmap of Monthly Average Prices')
plt.xlabel('Month')
plt.ylabel('Year')
plt.show()

"""# **4.5 Inflation Rate**

## **Inflation trends overtime for different countries**
"""

inflation_rate['date'] = pd.to_datetime(inflation_rate['date'], format='%m/%d/%Y')

inflation_rate.set_index('date', inplace=True)

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

num_countries = len(inflation_rate.columns)
cols = 3
rows = (num_countries + cols - 1) // cols

fig, axes = plt.subplots(rows, cols, figsize=(20, 5 * rows), sharex=True, sharey=True)
axes = axes.flatten()

for i, column in enumerate(inflation_rate.columns):
    axes[i].plot(inflation_rate.index, inflation_rate[column])
    axes[i].set_title(column.strip())
    axes[i].set_ylabel('Inflation Rate (%)')
    axes[i].set_xlabel('Year')
    axes[i].grid(True)

for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])


plt.subplots_adjust(hspace=0.5, wspace=0.4)
plt.show()

"""## **Min, Average and Max of Inflation Rate for All Countries**"""

import plotly.graph_objects as go
import pandas as pd

inflation_rate['Year'] = inflation_rate.index.year

yearly_stats = inflation_rate.groupby('Year').agg(['mean', 'min', 'max'])

yearly_stats.columns = ['_'.join(col) for col in yearly_stats.columns]

global_mean = yearly_stats.filter(like='_mean').mean(axis=1)
global_min = yearly_stats.filter(like='_min').min(axis=1)
global_max = yearly_stats.filter(like='_max').max(axis=1)

fig = go.Figure()

fig.add_trace(go.Scatter(x=global_mean.index, y=global_mean, mode='lines+markers', name='Global Average Inflation Rate', line=dict(color='blue')))
fig.add_trace(go.Scatter(x=global_min.index, y=global_min, mode='lines+markers', name='Global Minimum Inflation Rate', line=dict(color='red', dash='dash')))
fig.add_trace(go.Scatter(x=global_max.index, y=global_max, mode='lines+markers', name='Global Maximum Inflation Rate', line=dict(color='green', dash='dot')))

fig.add_trace(go.Scatter(
    x=list(global_mean.index) + list(global_mean.index[::-1]),
    y=list(global_min) + list(global_max[::-1]),
    fill='toself',
    fillcolor='rgba(128, 128, 128, 0.2)',
    line=dict(color='rgba(255, 255, 255, 0)'),
    showlegend=False
))

fig.update_layout(
    title="Global Aggregated Inflation Rate Trends Over Time",
    xaxis_title="Year",
    yaxis_title="Inflation Rate (%)",
    template='plotly_white',
    xaxis=dict(showline=True, showgrid=False),
    yaxis=dict(showline=True, showgrid=True),
    legend=dict(x=0, y=1.1, orientation='h')
)

fig.show()

"""## **Countries that entitled to low inflation rate.**"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

if 'Year' in inflation_rate.columns:
    inflation_rate.set_index('Year', inplace=True)

yearly_average = inflation_rate.mean(axis=1)
yearly_average_array = yearly_average.values

threshold = np.percentile(inflation_rate.values, 25, axis=1)
below_threshold_counts = (inflation_rate.values < threshold[:, None]).sum(axis=1)

fig = plt.figure(figsize=(14, 10))
ax = fig.add_subplot(111, projection='3d')

X = inflation_rate.index
Y = below_threshold_counts
Z = yearly_average_array

scatter = ax.scatter(X, Y, Z, c=Z, cmap='viridis', marker='o', s=100)

cbar = fig.colorbar(scatter, ax=ax, shrink=0.5, aspect=5)
cbar.set_label('Yearly Average Inflation Rate', fontsize=12)

ax.set_title('3D Trend of Countries with Inflation Rates Below Low Threshold and Yearly Average Rates', fontsize=16, weight='bold')
ax.set_xlabel('Year', fontsize=12)
ax.set_ylabel('Countries Below Low Threshold', fontsize=12)
ax.set_zlabel('Yearly Average Inflation Rate', fontsize=12)
ax.view_init(elev=30, azim=135)
ax.grid(True)
plt.show()

"""## **Countries that entitled to high inflation rate.**"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

if 'Year' in inflation_rate.columns:
    inflation_rate.set_index('Year', inplace=True)

yearly_average = inflation_rate.mean(axis=1)
yearly_average_array = yearly_average.values

threshold = np.percentile(inflation_rate.values, 75, axis=1)
above_threshold_counts = (inflation_rate.values > threshold[:, None]).sum(axis=1)

fig = plt.figure(figsize=(14, 10))
ax = fig.add_subplot(111, projection='3d')
X = inflation_rate.index
Y = above_threshold_counts
Z = yearly_average_array
scatter = ax.scatter(X, Y, Z, c=Z, cmap='plasma', marker='o', s=100)

cbar = fig.colorbar(scatter, ax=ax, shrink=0.5, aspect=5)
cbar.set_label('Yearly Average Inflation Rate', fontsize=12)

ax.set_title('3D Trend of Countries with Inflation Rates Above High Threshold and Yearly Average Rates', fontsize=16, weight='bold')
ax.set_xlabel('Year', fontsize=12)
ax.set_ylabel('Countries Above High Threshold', fontsize=12)
ax.set_zlabel('Yearly Average Inflation Rate', fontsize=12)

ax.view_init(elev=30, azim=135)
ax.grid(True)
plt.show()

"""## **Most Shown Average Inflation Rate**"""

import matplotlib.pyplot as plt

# Assuming 'Year' is your index
years = inflation_rate.index
mean_inflation = inflation_rate.mean(axis=1)

plt.figure(figsize=(14, 7))
plt.plot(years, mean_inflation, label='Mean Inflation Rate', color='blue', linestyle='-', marker='o')

plt.title('Yearly Average Inflation Rates Over Time', fontsize=16, weight='bold')
plt.xlabel('Year', fontsize=12)
plt.ylabel('Average Inflation Rate (%)', fontsize=12)
plt.legend()
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""# **4.6 Exchange Rate**

## **Trends of Selected Exchange Rate**

Selected Exchange Rate :
*   myr_usd
*   myr_eur
*   myr_gbp
*   myr_jpy
"""

plt.figure(figsize=(12, 6))
plt.plot(exchange_rate['date'], exchange_rate['myr_usd'], label='MYR/USD')
plt.plot(exchange_rate['date'], exchange_rate['myr_eur'], label='MYR/EUR')
plt.plot(exchange_rate['date'], exchange_rate['myr_gbp'], label='MYR/GBP')
plt.title('Selected Exchange Rates Over Time')
plt.xlabel('Date')
plt.ylabel('Exchange Rate')
plt.legend()
plt.show()

"""## **Moving Average of the Exchange Rate MYR to USD**"""

exchange_rate['myr_usd_ma_12'] = exchange_rate['myr_usd'].rolling(window=12).mean()
exchange_rate['myr_usd_ma_24'] = exchange_rate['myr_usd'].rolling(window=24).mean()

plt.figure(figsize=(14, 8))
plt.plot(exchange_rate.index, exchange_rate['myr_usd'], label='MYR/USD')
plt.plot(exchange_rate.index, exchange_rate['myr_usd_ma_12'], label='12-Month Moving Average')
plt.plot(exchange_rate.index, exchange_rate['myr_usd_ma_24'], label='24-Month Moving Average')
plt.title('MYR/USD with Moving Averages')
plt.xlabel('Date')
plt.ylabel('Exchange Rate')
plt.legend()
plt.show()

"""## **Rolling Statistics for the Exchange Rate MYR to USD**"""

exchange_rate['rolling_mean'] = exchange_rate['myr_usd'].rolling(window=12).mean()
exchange_rate['rolling_std'] = exchange_rate['myr_usd'].rolling(window=12).std()

plt.figure(figsize=(14, 8))
plt.plot(exchange_rate.index, exchange_rate['myr_usd'], label='MYR/USD')
plt.plot(exchange_rate.index, exchange_rate['rolling_mean'], label='Rolling Mean')
plt.plot(exchange_rate.index, exchange_rate['rolling_std'], label='Rolling Std Dev')
plt.title('Rolling Statistics for MYR/USD')
plt.xlabel('Date')
plt.ylabel('Exchange Rate')
plt.legend()
plt.grid()
plt.show()

"""## **Distribution of the Exchange Rate MYR to USD Yearly**"""

import plotly.express as px

fig = px.box(exchange_rate, x='Year', y='myr_usd',
             title='Distribution of MYR/USD Exchange Rate by Year',
             labels={'Year': 'Year', 'myr_usd': 'Exchange Rate'})

fig.update_layout(
    xaxis_title="Year",
    yaxis_title="Exchange Rate",
    xaxis=dict(tickangle=90),
    height=600,
    width=900
)

fig.show()

"""# **5.0 Data Modeling**

## **5.1 Commodity Price**
"""

!pip install dtaidistance
!pip install fastdtw scipy numpy pandas

import numpy as np
import pandas as pd
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import scipy.cluster.hierarchy as sch

from sklearn.cluster import DBSCAN, AgglomerativeClustering, SpectralClustering
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.utils import resample
from sklearn.impute import SimpleImputer
from scipy.cluster.hierarchy import dendrogram, linkage
from joblib import Parallel, delayed
from sklearn.metrics import adjusted_rand_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import pairwise_distances
from sklearn.neighbors import kneighbors_graph
from fastdtw import fastdtw
from dtaidistance import dtw
from sklearn.mixture import GaussianMixture
from plotly.subplots import make_subplots
from sklearn.metrics.pairwise import euclidean_distances
from scipy.spatial.distance import euclidean, pdist, squareform
from scipy.cluster.hierarchy import fcluster
from sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score
from sklearn.preprocessing import MinMaxScaler

from google.colab import files
uploaded = files.upload()

commodity = pd.read_csv('Commodity_Price.csv')
print(commodity)

print("Original dtypes:")
print(commodity.dtypes)

"""### **Feature Engineering**"""

commodity['Date'] = pd.to_datetime(commodity['DATE'], errors='coerce')

commodity = commodity.dropna(subset=['Date'])

commodity['Date_num'] = (commodity['Date'] - commodity['Date'].min()).dt.days
commodity['Year'] = commodity['Date'].dt.year
commodity['Month'] = commodity['Date'].dt.month
commodity['Day'] = commodity['Date'].dt.day
commodity['DayOfYear'] = commodity['Date'].dt.dayofyear

print(commodity.dtypes)

commodity = commodity.drop(columns=['DATE'])

print(commodity)

zero_count = (commodity == 0).sum()
print("Zero counts in each column:\n", zero_count)

tolerance = 1e-6

std_devs = commodity.select_dtypes(include=['int64']).std()
low_variance_columns = std_devs[std_devs < tolerance].index

print("Columns with low variance (below tolerance):", low_variance_columns)

commodity_cleaned = commodity.drop(columns=low_variance_columns)

print("Cleaned DataFrame (after removing low variance columns):")
print(commodity_cleaned.head())

features = ['Date_num', 'Year', 'Month', 'Day', 'DayOfYear']
X = commodity_cleaned[features]

"""### **Scaling and Normalization**"""

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

def dtw_parallel(i, feature_values):
    distances = np.zeros(feature_values.shape[0])
    ts_i = feature_values[i].reshape(-1, 1)


    for j in range(i + 1, feature_values.shape[0]):
        ts_j = feature_values[j].reshape(-1, 1)
        distance, _ = fastdtw(ts_i, ts_j, dist=euclidean)
        distances[j] = distance
    return distances

distances_combined = np.zeros((X_scaled.shape[0], X_scaled.shape[0]))

for feature in features:
    print(f"\nComputing DTW distances for feature '{feature}'...")
    feature_values = X[feature].values.reshape(-1, 1)

    results = Parallel(n_jobs=-1)(delayed(dtw_parallel)(i, feature_values) for i in range(feature_values.shape[0]))

    for i in range(len(results)):
        distances_combined[i, i + 1:] += results[i][i + 1:]
        distances_combined[i + 1:, i] += results[i][i + 1:]
print("\nDebugging shapes before aggregation:")
print("Combined distance matrix shape:", distances_combined.shape)

"""## **Gaussian Mixture Models (GMM)**

### **Evaluate Clustering**
"""

n_components_list = [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15]

covariance_types = ['full', 'tied', 'diag', 'spherical']

best_gmm_score = -1
best_gmm_db_index = float('inf')
best_gmm_calinski_harabasz = -1
best_gmm_clusters = None
best_gmm_n_components = None
best_gmm_covariance_type = None

for n_components in n_components_list:
    for covariance_type in covariance_types:
        gmm = GaussianMixture(n_components=n_components, covariance_type=covariance_type, random_state=42)
        clusters_gmm = gmm.fit_predict(X_scaled)

        if len(set(clusters_gmm)) > 1:
            silhouette_avg = silhouette_score(X_scaled, clusters_gmm)
            db_index = davies_bouldin_score(X_scaled, clusters_gmm)
            calinski_harabasz_avg = calinski_harabasz_score(X_scaled, clusters_gmm)
        else:
            silhouette_avg = np.nan
            db_index = np.nan
            calinski_harabasz_avg = np.nan

        print(f"GMM with {n_components} components and covariance type '{covariance_type}':")
        print(f"Silhouette Score: {silhouette_avg:.3f}" if not np.isnan(silhouette_avg) else "Silhouette Score: N/A")
        print(f"Davies-Bouldin Index: {db_index:.3f}" if not np.isnan(db_index) else "Davies-Bouldin Index: N/A")
        print(f"Calinski-Harabasz Index: {calinski_harabasz_avg:.3f}" if not np.isnan(calinski_harabasz_avg) else "Calinski-Harabasz Index: N/A")

        if not np.isnan(silhouette_avg) and silhouette_avg > best_gmm_score and not np.isnan(db_index) and db_index < best_gmm_db_index:
            best_gmm_score = silhouette_avg
            best_gmm_db_index = db_index
            best_gmm_calinski_harabasz = calinski_harabasz_avg
            best_gmm_clusters = clusters_gmm
            best_gmm_n_components = n_components
            best_gmm_covariance_type = covariance_type

print("\nBest GMM Results:")
print(f"Number of Components: {best_gmm_n_components}")
print(f"Covariance Type: {best_gmm_covariance_type}")
print(f"Best Silhouette Score: {best_gmm_score:.3f}")
print(f"Best Davies-Bouldin Index: {best_gmm_db_index:.3f}")
print(f"Best Calinski-Harabasz Index: {best_gmm_calinski_harabasz:.3f}")

"""## **Analysis and Validation**

*   **Feature 0 : Date_numYear**
*   **Feature 1 : Month**
*   **Feature 2 : Day**
*   **Feature 3 : DayOfYear**
"""

interactive_df = pd.DataFrame(X_scaled, columns=[f'Feature_{i}' for i in range(X_scaled.shape[1])])
interactive_df['Cluster'] = clusters

feature_names = [f'Feature_{i}' for i in range(X_scaled.shape[1])]

num_features = len(feature_names)

fig = make_subplots(
    rows=num_features, cols=num_features,
    subplot_titles=[f'{f1} vs {f2}' for f1 in feature_names for f2 in feature_names],
    vertical_spacing=0.05,
    horizontal_spacing=0.05
)

for i in range(num_features):
    for j in range(num_features):
        feature_x = feature_names[j]
        feature_y = feature_names[i]

        trace = go.Scatter(
            x=interactive_df[feature_x],
            y=interactive_df[feature_y],
            mode='markers',
            marker=dict(
                color=interactive_df['Cluster'],
                colorscale='Jet',
                size=10,
                opacity=0.8,
                line=dict(width=1, color='rgba(0,0,0,0.5)')
            ),
            name=f'{feature_x} vs {feature_y}'
        )
        fig.add_trace(trace, row=i+1, col=j+1)

fig.update_layout(
    height=num_features * 400,
    width=num_features * 400,
    title_text='Cluster Visualization for All Feature Pairs',
    showlegend=True,
    title_font_size=24,
    xaxis_title_font_size=18,
    yaxis_title_font_size=18,
    margin=dict(t=100, b=50, l=50, r=50)
)

for i in range(num_features):
    for j in range(num_features):
        fig.update_xaxes(title_text=feature_names[j], row=i+1, col=j+1)
        fig.update_yaxes(title_text=feature_names[i], row=i+1, col=j+1)

for cluster_id in set(clusters):
    cluster_df = interactive_df[interactive_df['Cluster'] == cluster_id]
    fig.add_shape(
        type='circle',
        xref='x', yref='y',
        x0=cluster_df[feature_names[0]].min(),
        x1=cluster_df[feature_names[0]].max(),
        y0=cluster_df[feature_names[1]].min(),
        y1=cluster_df[feature_names[1]].max(),
        line=dict(color='red', width=2)
    )

fig.show()

"""### **Cross-Validation**

**Bootstrapping**
"""

n_bootstraps = 10
bootstrap_clusters = []

for _ in range(n_bootstraps):
    X_bootstrap = resample(X_scaled, random_state=42)

    gmm = GaussianMixture(n_components=12, covariance_type='tied', random_state=42)
    gmm.fit(X_bootstrap)
    clusters_bootstrap = gmm.predict(X_bootstrap)

    bootstrap_clusters.append(clusters_bootstrap)

"""### **Cluster Profiling**"""

interactive_df = pd.DataFrame(X_scaled, columns=[f'Feature_{i}' for i in range(X_scaled.shape[1])])
interactive_df['Cluster'] = clusters

cluster_profiles = interactive_df.groupby('Cluster').mean()
print(cluster_profiles)

"""### **Sensitivity Analysis**

**Parameter Sensitivity**
"""

gmm1 = GaussianMixture(n_components=12, covariance_type='tied', random_state=42)
clusters1 = gmm1.fit_predict(X_scaled)

gmm2 = GaussianMixture(n_components=12, covariance_type='full', random_state=42)
clusters2 = gmm2.fit_predict(X_scaled)

ari = adjusted_rand_score(clusters1, clusters2)
print(f'Adjusted Rand Index for Parameter Sensitivity: {ari:.3f}')

"""## **5.2 Interest Rate**"""

interest = pd.read_csv('Interest_Rate_selected.csv')
print(interest)

years = interest['Year']
features = interest.drop(columns=['Year'])
print(features)

"""### **Feature Scaling**"""

means = features.replace(0, np.nan).mean()
features_filled = features.replace(0, np.nan).fillna(means)
final_df = pd.concat([years, features_filled], axis=1)
final_df.to_csv('Interest_Rate_filled.csv', index=False)
print(final_df)

years = final_df['Year']
features = final_df.drop(columns=['Year'])
print(features)

"""### **Scaling and Normalization**"""

scaler = StandardScaler()

standardized_features = scaler.fit_transform(features)

standardized_df = pd.DataFrame(standardized_features, columns=features.columns)
standardized_df['Year'] = years

standardized_df.to_csv('Interest_Rate_standardized.csv', index=False)

print(standardized_df.head())

print("Mean of standardized data:\n", standardized_df.mean())
print("Standard deviation of standardized data:\n", standardized_df.std())

print("NaNs in standardized data:\n", standardized_df.isna().sum())
print("Infinities in standardized data:\n", (standardized_df == float('inf')).sum())

print("\nShape of original data:", interest.shape)
print("Shape of filled data:", final_df.shape)
print("Shape of standardized data:", standardized_df.shape)

"""### **Dimensionality Reduction**"""

X = standardized_df.drop(columns=['Year'])

explained_variances = []
n_components_range = range(1, X.shape[1] + 1)

for n in n_components_range:
    pca = PCA(n_components=n)
    pca.fit(X)
    explained_variances.append(np.sum(pca.explained_variance_ratio_))

plt.figure(figsize=(10, 6))
plt.plot(n_components_range, explained_variances, marker='o', linestyle='--')
plt.xlabel('Number of Principal Components')
plt.ylabel('Cumulative Explained Variance')
plt.title('Explained Variance vs Number of Principal Components')
plt.grid(True)
plt.show()

"""**Principal Component Analysis (PCA)**"""

optimal_components = 7
pca = PCA(n_components=optimal_components)
principal_components = pca.fit_transform(standardized_df.drop(columns=['Year']))

pca_df = pd.DataFrame(data=principal_components, columns=[f'PC{i+1}' for i in range(optimal_components)])
pca_df['Year'] = standardized_df['Year']

plt.figure(figsize=(10, 6))
plt.scatter(pca_df['PC1'], pca_df['PC2'], c=pca_df['Year'], cmap='viridis', alpha=0.7)
plt.colorbar(label='Year')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title(f'PCA with {optimal_components} Components')
plt.show()

"""## **Agglomerative Clustering**"""

cluster_range = range(2, 21)
linkage_methods = ['ward', 'complete', 'average', 'single']
results = {method: {'silhouette_scores': [], 'calinski_harabasz_scores': [], 'davies_bouldin_scores': []} for method in linkage_methods}

for method in linkage_methods:
    for n_clusters in cluster_range:
        clustering = AgglomerativeClustering(n_clusters=n_clusters, linkage=method)
        labels = clustering.fit_predict(X)

        silhouette_avg = silhouette_score(X, labels)
        calinski_harabasz_avg = calinski_harabasz_score(X, labels)
        davies_bouldin_avg = davies_bouldin_score(X, labels)

        results[method]['silhouette_scores'].append(silhouette_avg)
        results[method]['calinski_harabasz_scores'].append(calinski_harabasz_avg)
        results[method]['davies_bouldin_scores'].append(davies_bouldin_avg)

        print(f'Linkage: {method}, Clusters: {n_clusters}')
        print(f'Silhouette Score: {silhouette_avg}')
        print(f'Calinski-Harabasz Score: {calinski_harabasz_avg}')
        print(f'Davies-Bouldin Score: {davies_bouldin_avg}')
        print('---')

plt.figure(figsize=(15, 15))

for i, method in enumerate(linkage_methods):
    plt.subplot(len(linkage_methods), 3, 3*i+1)
    plt.plot(cluster_range, results[method]['silhouette_scores'], marker='o')
    plt.title(f'Silhouette Score ({method})')
    plt.xlabel('Number of Clusters')
    plt.ylabel('Score')

    plt.subplot(len(linkage_methods), 3, 3*i+2)
    plt.plot(cluster_range, results[method]['calinski_harabasz_scores'], marker='o')
    plt.title(f'Calinski-Harabasz Score ({method})')
    plt.xlabel('Number of Clusters')
    plt.ylabel('Score')

    plt.subplot(len(linkage_methods), 3, 3*i+3)
    plt.plot(cluster_range, results[method]['davies_bouldin_scores'], marker='o')
    plt.title(f'Davies-Bouldin Score ({method})')
    plt.xlabel('Number of Clusters')
    plt.ylabel('Score')

plt.tight_layout()
plt.show()

optimal_clusters = {}
for method in linkage_methods:
    silhouette_scores = np.array(results[method]['silhouette_scores'])
    calinski_harabasz_scores = np.array(results[method]['calinski_harabasz_scores'])
    davies_bouldin_scores = np.array(results[method]['davies_bouldin_scores'])

    optimal_silhouette_index = np.argmax(silhouette_scores)
    optimal_calinski_harabasz_index = np.argmax(calinski_harabasz_scores)
    optimal_davies_bouldin_index = np.argmin(davies_bouldin_scores)

    optimal_silhouette_clusters = cluster_range[optimal_silhouette_index]
    optimal_calinski_harabasz_clusters = cluster_range[optimal_calinski_harabasz_index]
    optimal_davies_bouldin_clusters = cluster_range[optimal_davies_bouldin_index]

    optimal_clusters[method] = {
        'silhouette': optimal_silhouette_clusters,
        'calinski_harabasz': optimal_calinski_harabasz_clusters,
        'davies_bouldin': optimal_davies_bouldin_clusters
    }

for method, optimal in optimal_clusters.items():
    print(f'\nLinkage Method: {method}')
    print(f'Optimal number of clusters based on Silhouette Score: {optimal["silhouette"]}')
    print(f'Optimal number of clusters based on Calinski-Harabasz Score: {optimal["calinski_harabasz"]}')
    print(f'Optimal number of clusters based on Davies-Bouldin Score: {optimal["davies_bouldin"]}')

for method in linkage_methods:
    print(f'\nVisualizing clusters for Linkage Method: {method}')

    optimal_n_clusters = optimal_clusters[method]['silhouette']
    final_clustering = AgglomerativeClustering(n_clusters=optimal_n_clusters, linkage=method)
    final_labels = final_clustering.fit_predict(X)
    pca_df['Cluster'] = final_labels

    plt.figure(figsize=(10, 6))
    scatter = plt.scatter(pca_df['PC1'], pca_df['PC2'], c=pca_df['Cluster'], cmap='viridis', alpha=0.7)
    plt.colorbar(scatter, label='Cluster')
    plt.xlabel('Principal Component 1')
    plt.ylabel('Principal Component 2')
    plt.title(f'Silhouette Score Optimal Clusters ({method}, {optimal_n_clusters} Clusters)')
    plt.show()

    optimal_n_clusters = optimal_clusters[method]['calinski_harabasz']
    final_clustering = AgglomerativeClustering(n_clusters=optimal_n_clusters, linkage=method)
    final_labels = final_clustering.fit_predict(X)
    pca_df['Cluster'] = final_labels

    plt.figure(figsize=(10, 6))
    scatter = plt.scatter(pca_df['PC1'], pca_df['PC2'], c=pca_df['Cluster'], cmap='viridis', alpha=0.7)
    plt.colorbar(scatter, label='Cluster')
    plt.xlabel('Principal Component 1')
    plt.ylabel('Principal Component 2')
    plt.title(f'Calinski-Harabasz Score Optimal Clusters ({method}, {optimal_n_clusters} Clusters)')
    plt.show()

    optimal_n_clusters = optimal_clusters[method]['davies_bouldin']
    final_clustering = AgglomerativeClustering(n_clusters=optimal_n_clusters, linkage=method)
    final_labels = final_clustering.fit_predict(X)
    pca_df['Cluster'] = final_labels

    plt.figure(figsize=(10, 6))
    scatter = plt.scatter(pca_df['PC1'], pca_df['PC2'], c=pca_df['Cluster'], cmap='viridis', alpha=0.7)
    plt.colorbar(scatter, label='Cluster')
    plt.xlabel('Principal Component 1')
    plt.ylabel('Principal Component 2')
    plt.title(f'Davies-Bouldin Score Optimal Clusters ({method}, {optimal_n_clusters} Clusters)')
    plt.show()

print("\nBest Scores for Each Linkage Method and Metric:")
for method in linkage_methods:
    silhouette_scores = np.array(results[method]['silhouette_scores'])
    calinski_harabasz_scores = np.array(results[method]['calinski_harabasz_scores'])
    davies_bouldin_scores = np.array(results[method]['davies_bouldin_scores'])

    best_silhouette_score = np.max(silhouette_scores)
    best_silhouette_clusters = cluster_range[np.argmax(silhouette_scores)]

    best_calinski_harabasz_score = np.max(calinski_harabasz_scores)
    best_calinski_harabasz_clusters = cluster_range[np.argmax(calinski_harabasz_scores)]

    best_davies_bouldin_score = np.min(davies_bouldin_scores)
    best_davies_bouldin_clusters = cluster_range[np.argmin(davies_bouldin_scores)]

    print(f'\nLinkage Method: {method}')
    print(f'Best Silhouette Score: {best_silhouette_score} (Clusters: {best_silhouette_clusters})')
    print(f'Best Calinski-Harabasz Score: {best_calinski_harabasz_score} (Clusters: {best_calinski_harabasz_clusters})')
    print(f'Best Davies-Bouldin Score: {best_davies_bouldin_score} (Clusters: {best_davies_bouldin_clusters})')

best_scores = {
    'silhouette': {'score': -np.inf, 'method': None, 'clusters': None},
    'calinski_harabasz': {'score': -np.inf, 'method': None, 'clusters': None},
    'davies_bouldin': {'score': np.inf, 'method': None, 'clusters': None}
}

print("\nBest Scores for Each Linkage Method and Metric:")
for method in linkage_methods:
    silhouette_scores = np.array(results[method]['silhouette_scores'])
    calinski_harabasz_scores = np.array(results[method]['calinski_harabasz_scores'])
    davies_bouldin_scores = np.array(results[method]['davies_bouldin_scores'])

    best_silhouette_score = np.max(silhouette_scores)
    best_silhouette_clusters = cluster_range[np.argmax(silhouette_scores)]

    best_calinski_harabasz_score = np.max(calinski_harabasz_scores)
    best_calinski_harabasz_clusters = cluster_range[np.argmax(calinski_harabasz_scores)]

    best_davies_bouldin_score = np.min(davies_bouldin_scores)
    best_davies_bouldin_clusters = cluster_range[np.argmin(davies_bouldin_scores)]

    if best_silhouette_score > best_scores['silhouette']['score']:
        best_scores['silhouette']['score'] = best_silhouette_score
        best_scores['silhouette']['method'] = method
        best_scores['silhouette']['clusters'] = best_silhouette_clusters

    if best_calinski_harabasz_score > best_scores['calinski_harabasz']['score']:
        best_scores['calinski_harabasz']['score'] = best_calinski_harabasz_score
        best_scores['calinski_harabasz']['method'] = method
        best_scores['calinski_harabasz']['clusters'] = best_calinski_harabasz_clusters

    if best_davies_bouldin_score < best_scores['davies_bouldin']['score']:
        best_scores['davies_bouldin']['score'] = best_davies_bouldin_score
        best_scores['davies_bouldin']['method'] = method
        best_scores['davies_bouldin']['clusters'] = best_davies_bouldin_clusters

print("\nOverall Best Scores:")
print(f"Best Silhouette Score: {best_scores['silhouette']['score']} (Method: {best_scores['silhouette']['method']}, Clusters: {best_scores['silhouette']['clusters']})")
print(f"Best Calinski-Harabasz Score: {best_scores['calinski_harabasz']['score']} (Method: {best_scores['calinski_harabasz']['method']}, Clusters: {best_scores['calinski_harabasz']['clusters']})")
print(f"Best Davies-Bouldin Score: {best_scores['davies_bouldin']['score']} (Method: {best_scores['davies_bouldin']['method']}, Clusters: {best_scores['davies_bouldin']['clusters']})")

best_overall = {
    'score': -np.inf,
    'method': None,
    'clusters': None,
    'metric': None
}

for metric, score_info in best_scores.items():
    if (metric == 'davies_bouldin' and score_info['score'] < best_overall['score']) or \
       (metric != 'davies_bouldin' and score_info['score'] > best_overall['score']):
        best_overall['score'] = score_info['score']
        best_overall['method'] = score_info['method']
        best_overall['clusters'] = score_info['clusters']
        best_overall['metric'] = metric

print("\nBest Overall Score:")
print(f"Score: {best_overall['score']} (Metric: {best_overall['metric']}, Method: {best_overall['method']}, Clusters: {best_overall['clusters']})")

"""## **5.3 Inflation Rate**"""

inflation = pd.read_csv('Inflation_Rate.csv')
print(inflation)

"""### **Feature Engineering**"""

inflation['date'] = pd.to_datetime(inflation['date'], errors='coerce')

inflation = inflation.dropna(subset=['date'])

inflation['Date_num'] = (inflation['date'] - inflation['date'].min()).dt.days
inflation['Year'] = inflation['date'].dt.year
inflation['Month'] = inflation['date'].dt.month
inflation['Day'] = inflation['date'].dt.day
inflation['DayOfYear'] = inflation['date'].dt.dayofyear

print(inflation.dtypes)

"""### **Feature Scaling**"""

averages = inflation.replace(0, np.nan).mean()
inflation.replace(0, averages, inplace=True)
print(inflation.head())

"""### **Scaling and Normalization**"""

scaler = StandardScaler()
numeric_columns = inflation.select_dtypes(include=[np.number]).columns
scaled_inflation = scaler.fit_transform(inflation[numeric_columns])
scaled_inflation_rate = pd.DataFrame(scaled_inflation, columns=numeric_columns)
print(scaled_inflation_rate)

zero_count = (scaled_inflation_rate == 0).sum()
print("Zero counts in each column:\n", zero_count)

tolerance = 1e-6

std_devs = inflation.select_dtypes(include=['float64']).std()
low_variance_columns = std_devs[std_devs < tolerance].index

print("Columns with low variance (below tolerance):", low_variance_columns)

inflation_cleaned = inflation.drop(columns=low_variance_columns)

print("Cleaned DataFrame:")
print(inflation_cleaned)

"""### **Dimensionality Reduction**"""

pca = PCA()
pca.fit(scaled_inflation_rate)

plt.figure(figsize=(10, 6))
plt.plot(range(1, len(pca.explained_variance_ratio_) + 1), pca.explained_variance_ratio_, marker='o')
plt.title('Explained Variance Ratio by Principal Component')
plt.xlabel('Number of Principal Components')
plt.ylabel('Explained Variance Ratio')
plt.show()

n_components = 5

pca = PCA(n_components=n_components)
reduced_data = pca.fit_transform(scaled_inflation_rate)

"""## **Gaussian Mixture Models (GMM)**"""

n_clusters_list = range(2, 21)

silhouette_scores_gmm = []
davies_bouldin_scores_gmm = []

for n_clusters in n_clusters_list:
    gmm = GaussianMixture(n_components=n_clusters, random_state=42)
    cluster_labels = gmm.fit_predict(reduced_data)

    silhouette_avg = silhouette_score(reduced_data, cluster_labels)
    silhouette_scores_gmm.append(silhouette_avg)

    davies_bouldin_avg = davies_bouldin_score(reduced_data, cluster_labels)
    davies_bouldin_scores_gmm.append(davies_bouldin_avg)

plt.figure(figsize=(10, 6))
plt.plot(n_clusters_list, silhouette_scores_gmm, marker='o', label='Silhouette Score (GMM)')
plt.plot(n_clusters_list, davies_bouldin_scores_gmm, marker='o', label='Davies-Bouldin Score (GMM)')
plt.title('GMM Clustering Evaluation Metrics vs Number of Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('Score')
plt.legend()
plt.grid(True)
plt.show()

"""### **Evaluate Clustering**"""

results_df_gmm = pd.DataFrame({
    'Number of Clusters': n_clusters_list,
    'Silhouette Score (GMM)': silhouette_scores_gmm,
    'Davies-Bouldin Score (GMM)': davies_bouldin_scores_gmm
})

best_silhouette_idx_gmm = np.argmax(silhouette_scores_gmm)
best_davies_bouldin_idx_gmm = np.argmin(davies_bouldin_scores_gmm)

best_n_clusters_silhouette_gmm = n_clusters_list[best_silhouette_idx_gmm]
best_n_clusters_davies_bouldin_gmm = n_clusters_list[best_davies_bouldin_idx_gmm]

best_silhouette_score_gmm = silhouette_scores_gmm[best_silhouette_idx_gmm]
best_davies_bouldin_score_gmm = davies_bouldin_scores_gmm[best_davies_bouldin_idx_gmm]

print("All GMM Clustering Results:")
print(results_df_gmm)

print("\nBest GMM Clustering Results:")
print(f'Best Number of Clusters based on Silhouette Score: {best_n_clusters_silhouette_gmm}')
print(f'Best Silhouette Score: {best_silhouette_score_gmm}')

print(f'\nBest Number of Clusters based on Davies-Bouldin Score: {best_n_clusters_davies_bouldin_gmm}')
print(f'Best Davies-Bouldin Score: {best_davies_bouldin_score_gmm}')

"""## **5.4 Exchange Rate**"""

pip install fastdtw

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.mixture import GaussianMixture
from sklearn.metrics import silhouette_score
from sklearn.cluster import AgglomerativeClustering
from fastdtw import fastdtw
from scipy.spatial.distance import euclidean

exchange_rate = pd.read_csv("Exchange_Rate.csv")

"""### **Clustering**

"""

print(exchange_rate.head())
print(exchange_rate.columns)

features = exchange_rate.drop(columns=['date'])

"""### **Normalize Data**

"""

scaler = StandardScaler()
X = scaler.fit_transform(features)

n_components_list = [2, 3, 4, 5, 6, 7, 8, 9, 10]
gmm_silhouette_scores = []

for n_components in n_components_list:
    gmm = GaussianMixture(n_components=n_components, random_state=42)
    labels = gmm.fit_predict(X)
    silhouette_avg = silhouette_score(X, labels)
    gmm_silhouette_scores.append(silhouette_avg)
    print(f"GMM with {n_components} components: Silhouette Score = {silhouette_avg}")

# Plot Silhouette Scores for GMM
plt.figure(figsize=(10, 6))
plt.plot(n_components_list, gmm_silhouette_scores, marker='o', linestyle='--')
plt.title("GMM Silhouette Scores for Different Number of Components")
plt.xlabel("Number of Components")
plt.ylabel("Silhouette Score")
plt.grid(True)
plt.show()

gmm = GaussianMixture(n_components=3)
clusters_gmm = gmm.fit_predict(X)

# Plot GMM Clustering Results
plt.figure(figsize=(10, 7))
sns.scatterplot(x=X[:, 0], y=X[:, 1], hue=clusters_gmm, palette='viridis')
plt.title('GMM Clustering Results')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()

"""### **Feature Engineering**"""

from sklearn.decomposition import PCA
import numpy as np
import matplotlib.pyplot as plt

pca = PCA(n_components=X.shape[1])
X_pca = pca.fit_transform(X)

silhouette_avg_gmm = silhouette_score(X, clusters_gmm)
print(f"Silhouette Score for GMM: {silhouette_avg_gmm}")

"""## **Hierarchical Clustering**

### **Clustering**
"""

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.metrics import silhouette_score

exchange_rate = pd.read_csv("Exchange_Rate.csv")
features = exchange_rate.drop(columns=['date'])
scaler = StandardScaler()
X = scaler.fit_transform(features)

hierarchical = AgglomerativeClustering(n_clusters=3)
clusters_hierarchical = hierarchical.fit_predict(X)

plt.figure(figsize=(10, 7))
Z = linkage(X, 'ward')
dendrogram(Z)
plt.title('Dendrogram for Hierarchical Clustering')
plt.xlabel('Sample index')
plt.ylabel('Distance')
plt.show()

"""### C**lustering Evaluation**"""

silhouette_avg_hierarchical = silhouette_score(X, clusters_hierarchical)
print(f"Silhouette Score for Hierarchical Clustering: {silhouette_avg_hierarchical}")

print("\nComparison of Hierarchical Clustering and GMM:")

print(f"Silhouette Score for Hierarchical Clustering: {silhouette_avg_hierarchical}")
print(f"Silhouette Score for GMM: {silhouette_avg_gmm}")

if silhouette_avg_hierarchical > silhouette_avg_gmm:
    print("Hierarchical Clustering performed better based on Silhouette Score.")
else:
    print("GMM performed better based on Silhouette Score.")

if dbi_hierarchical < dbi_gmm:
    print("Hierarchical Clustering performed better based on Davies-Bouldin Index.")
else:
    print("GMM performed better based on Davies-Bouldin Index.")

if chi_hierarchical > chi_gmm:
    print("Hierarchical Clustering performed better based on Calinski-Harabasz Index.")
else:
    print("GMM performed better based on Calinski-Harabasz Index.")

"""## **5.5 Unemployment Rate**"""

unemployed_rate = pd.read_csv('Unemployment_Rate.csv')

"""###Normalization

### Applying Agglomerative Clustering using the normalized data
"""

from sklearn.cluster import AgglomerativeClustering

n_clusters = 5
agg_cluster = AgglomerativeClustering(n_clusters=n_clusters, metric='euclidean', linkage='ward')
clusters = agg_cluster.fit_predict(Y_normalized_df)

Y_normalized_df['Cluster'] = clusters

"""### Group Countries by Clusters and Display Them"""

Y_normalized_df['Cluster'] = clusters
country_clusters = Y_normalized_df.groupby('Cluster').mean()

print("Cluster means:")
print(country_clusters)

"""### Get the Cluster for Each Country"""

country_clusters = Y_normalized_df['Cluster']

for cluster_num in range(n_clusters):
    print(f"Cluster {cluster_num}:")
    countries_in_cluster = Y_normalized_df[Y_normalized_df['Cluster'] == cluster_num].index.tolist()
    print(countries_in_cluster)

"""### Calculate and Display Mean Unemployment Rate for Each Cluster"""

cluster_means = Y_normalized_df.groupby('Cluster').mean()

print("Mean unemployment rates per cluster:")
print(cluster_means)

"""### Dendogram & Heatmap

**The dendrogram will help visualize how countries are clustered together based on their unemployment rate trends.**
"""

import scipy.cluster.hierarchy as sch
import matplotlib.pyplot as plt

linked = sch.linkage(Y_normalized, method='ward')

plt.figure(figsize=(14, 7))
sch.dendrogram(linked, orientation='top', labels=Y_normalized_df.index, distance_sort='descending', show_leaf_counts=True)
plt.title('Dendrogram for Unemployment Rate Clustering')
plt.xlabel('Country')
plt.ylabel('Euclidean Distances')
plt.show()

"""### Evaluation Metrics

**Silhouette Score**

The silhouette score measures how close each point in one cluster is to the points in the neighboring clusters. The score ranges from -1 to 1, with higher scores indicating that the clusters are well separated.
"""

from sklearn.metrics import silhouette_score

silhouette_avg = silhouette_score(Y_normalized, clusters)
print(f'Silhouette Score: {silhouette_avg:.4f}')

"""**Davies-Bouldin Index**

The Davies-Bouldin Index measures the average similarity ratio of each cluster with its most similar cluster. A lower score indicates better clustering performance.
"""

from sklearn.metrics import davies_bouldin_score

dbi = davies_bouldin_score(Y_normalized, clusters)
print(f'Davies-Bouldin Index: {dbi:.4f}')

"""**Calinski-Harabasz Index (Variance Ratio Criterion)**"""

from sklearn.metrics import calinski_harabasz_score

ch_score = calinski_harabasz_score(Y_normalized, clusters)
print(f'Calinski-Harabasz Score: {ch_score:.4f}')

"""## **5.6 Global Domestic Product (GDP)**"""

from google.colab import files
uploaded = files.upload()

gdp = pd.read_csv('GDP_filtered.csv')

"""### **Scaling and Normailization**

Standard Scaling (Standardization)
 - use StandardScaler to standardize the dataset, ensuring the mean is 0 and the standard deviation is 1 for each feature.
"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

gdp_scaled = scaler.fit_transform(gdp)

gdp_scaled_df = pd.DataFrame(gdp_scaled, columns=gdp.columns)

print(gdp_scaled_df.head())

"""Min-Max Normalization
- use MinMaxScaler to normalize the dataset, scaling all values between 0 and 1.
"""

from sklearn.preprocessing import MinMaxScaler

minmax_scaler = MinMaxScaler()

gdp_normalized = minmax_scaler.fit_transform(gdp)

gdp_normalized_df = pd.DataFrame(gdp_normalized, columns=gdp.columns)

print(gdp_normalized_df.head())

"""## **Hierarchical clustering**"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage
import seaborn as sns

import matplotlib.pyplot as plt
import scipy.cluster.hierarchy as sch

data_for_clustering = gdp_normalized_df

linked = sch.linkage(data_for_clustering, method='ward')

plt.figure(figsize=(12, 8))
sch.dendrogram(linked, labels=data_for_clustering.index, orientation='top', distance_sort='descending', show_leaf_counts=True)
plt.title('Dendrogram for Hierarchical Clustering')
plt.xlabel('Countries')
plt.ylabel('Euclidean distances')
plt.show()

from scipy.cluster.hierarchy import fcluster

max_d = 1.5
clusters = fcluster(linked, max_d, criterion='distance')

data_for_clustering['Cluster'] = clusters

num_clusters = len(set(clusters))
print(f"Number of clusters: {num_clusters}")

print(data_for_clustering[['Cluster']].head())

import matplotlib.pyplot as plt
import scipy.cluster.hierarchy as sch

data_for_clustering = gdp_normalized_df

linked = sch.linkage(data_for_clustering, method='ward')

plt.figure(figsize=(12, 8))

dendrogram = sch.dendrogram(linked, labels=data_for_clustering.index, orientation='top', distance_sort='descending', show_leaf_counts=True)

max_d = 1.5
plt.axhline(y=max_d, color='r', linestyle='--')

plt.title('Dendrogram for Hierarchical Clustering with Cutoff Line')
plt.xlabel('Countries')
plt.ylabel('Euclidean distances')
plt.show()

from scipy.cluster.hierarchy import fcluster

max_d = 1.5

cluster_labels = fcluster(linked, max_d, criterion='distance')

gdp_normalized_df['Cluster'] = cluster_labels

num_clusters = len(set(cluster_labels))
print(f"Number of clusters formed: {num_clusters}")
print(gdp_normalized_df.groupby('Cluster').mean())

"""### **Evaluate clustering**

"""

from sklearn.metrics import silhouette_score

silhouette_avg = silhouette_score(gdp_normalized, cluster_labels)
print(f"Average Silhouette Score: {silhouette_avg:.2f}")

cluster_sizes = gdp_normalized_df['Cluster'].value_counts()
print("Cluster sizes:")
print(cluster_sizes)

cluster_means = gdp_normalized_df.groupby('Cluster').mean()
print("Cluster means:")
print(cluster_means)

from sklearn.metrics import silhouette_score
from sklearn.cluster import AgglomerativeClustering

cluster_ranges = range(2, 21)

silhouette_scores = []

for n_clusters in cluster_ranges:
    model = AgglomerativeClustering(n_clusters=n_clusters, linkage='ward')
    cluster_labels = model.fit_predict(gdp_normalized)

    silhouette_avg = silhouette_score(gdp_normalized, cluster_labels)
    silhouette_scores.append(silhouette_avg)
    print(f"Number of Clusters: {n_clusters}, Silhouette Score: {silhouette_avg:.2f}")

plt.figure(figsize=(10, 6))
plt.plot(cluster_ranges, silhouette_scores, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores for Different Number of Clusters')
plt.show()
